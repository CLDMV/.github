# CLDMV/.github/.github/workflows/release.yml
name: 🚀 Release Workflow (Org-Level)

on:
  workflow_call:
    inputs:
      package_name:
        required: true
        type: string
        description: "NPM package name (e.g., @cldmv/slothlet)"
      debug:
        required: false
        type: boolean
        default: false
        description: "Enable debug logging for troubleshooting"
      node_version:
        required: false
        type: string
        default: "lts/*"
        description: "Node.js version to use (default: lts/*)"
      min_node_version:
        required: false
        type: string
        default: "20"
        description: "Minimum Node.js version for matrix testing (default: 20, oldest non-EOL)"
      max_node_major:
        required: false
        type: string
        default: "22"
        description: "Override max Node.js major version (default: 22)"
      package_manager:
        required: false
        type: string
        default: "npm"
        description: "Package manager (npm or yarn)"
      test_command:
        required: false
        type: string
        default: "npm test"
        description: "Command to run tests"
      build_command:
        required: false
        type: string
        default: "npm run build:ci"
        description: "Command to build package"
      version_bump:
        required: false
        type: string
        default: ""
        description: "Type of version bump (major, minor, patch). Leave empty for auto-detection from commit message."
      # Optional release parameters
      version:
        required: false
        type: string
        default: ""
        description: "Specific version for release (auto-calculated if not provided)"
      is_prerelease:
        required: false
        type: boolean
        default: false
        description: "Whether this is a prerelease"
      release_source_only:
        required: false
        type: boolean
        default: false
        description: "Whether to create source-only release (no package assets)"
      create_documentation:
        required: false
        type: boolean
        default: true
        description: "Whether to create/update VERSION_TAGS.md"
      # Test control options
      skip_performance_tests:
        required: false
        type: boolean
        default: false
        description: "Skip performance tests during CI"
      skip_matrix_tests:
        required: false
        type: boolean
        default: false
        description: "Skip matrix testing (use single node version only)"
      # Bot signing parameters
      use_gpg:
        required: false
        type: boolean
        default: false
        description: "If true, forward provided secrets to enable GPG signing"
    outputs:
      release-pr-created:
        description: "Whether a release PR was created"
        value: ${{ jobs.release.outputs.pr-created }}
      release-pr-number:
        description: "The release PR number if created"
        value: ${{ jobs.release.outputs.pr-number }}
      new-version:
        description: "The new version that was set"
        value: ${{ jobs.release.outputs.new-version }}

    secrets:
      NPM_TOKEN:
        description: "NPM token for publishing packages"
        required: false
      BOT_APP_ID:
        description: "GitHub App ID for CLDMV bot"
        required: false
      BOT_APP_PRIVATE_KEY:
        description: "GitHub App private key for CLDMV bot"
        required: false
      TAGGER_NAME:
        description: "GPG tagger name for signing"
        required: false
      TAGGER_EMAIL:
        description: "GPG tagger email for signing"
        required: false
      GPG_PRIVATE_KEY:
        description: "ASCII-armored private key for signing"
        required: false
      GPG_PASSPHRASE:
        description: "Passphrase for the private key (if protected)"
        required: false

jobs:
  build-and-test:
    name: "🏗️ Build and Test"
    uses: CLDMV/.github/.github/workflows/reusable-build-and-test.yml@v1
    with:
      package_name: ${{ inputs.package_name }}
      debug: ${{ inputs.debug }}
      node_version: ${{ inputs.node_version }}
      min_node_version: ${{ inputs.min_node_version }}
      max_node_major: ${{ inputs.max_node_major }}
      package_manager: ${{ inputs.package_manager }}
      test_command: ${{ inputs.test_command }}
      build_command: ${{ inputs.build_command }}
      skip_performance_tests: ${{ inputs.skip_performance_tests }}
      skip_matrix_tests: ${{ inputs.skip_matrix_tests }}

  release:
    name: "🚀 Release Management"
    needs: build-and-test
    uses: CLDMV/.github/.github/workflows/reusable-release-management.yml@v1
    with:
      package_name: ${{ inputs.package_name }}
      debug: ${{ inputs.debug }}
      # Job control flags - enable the jobs we want to run
      run_detect_release: true
      run_create_release_pr: true
      run_create_release: false  # Don't auto-create releases, just PRs
      # Build parameters
      node_version: ${{ inputs.node_version }}
      package_manager: ${{ inputs.package_manager }}
      version_bump: ${{ inputs.version_bump }}
      version: ${{ inputs.version }}
      is_prerelease: ${{ inputs.is_prerelease }}
      release_source_only: ${{ inputs.release_source_only }}
    secrets:
      BOT_APP_ID: ${{ secrets.BOT_APP_ID }}
      BOT_APP_PRIVATE_KEY: ${{ secrets.BOT_APP_PRIVATE_KEY }}
      TAGGER_NAME: ${{ secrets.TAGGER_NAME }}
      TAGGER_EMAIL: ${{ secrets.TAGGER_EMAIL }}
      GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
      GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

  summary:
    name: "📋 Release Summary"
    needs: [build-and-test, release]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate Release Summary
        run: |
          echo "## 🚀 Release Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Package**: \`${{ inputs.package_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.release.result }}" = "success" ]; then
            if [ "${{ needs.release.outputs.pr-created }}" = "true" ]; then
              echo "✅ **Overall Status**: Release PR created successfully" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**New Version**: \`${{ needs.release.outputs.new-version }}\`" >> $GITHUB_STEP_SUMMARY
              echo "**PR Number**: [#${{ needs.release.outputs.pr-number }}](${{ github.server_url }}/${{ github.repository }}/pull/${{ needs.release.outputs.pr-number }})" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "🔄 **Next Steps**: Review and merge the release PR to publish the package." >> $GITHUB_STEP_SUMMARY
            else
              echo "ℹ️ **Overall Status**: No release PR created" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "This commit was not detected as a release commit. Use \`release:\` or \`release!:\` prefix to trigger releases." >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ **Overall Status**: Release workflow failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Check the detailed progress above and workflow logs for specific failure details." >> $GITHUB_STEP_SUMMARY
          fi
