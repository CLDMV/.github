# CLDMV/.github/.github/workflows/publish-workflow.yml
name: Publish Workflow (Org-Level)

on:
  workflow_call:
    inputs:
      package_name:
        required: true
        type: string
        description: "NPM package name (e.g., @cldmv/slothlet)"
      node_version:
        required: false
        type: string
        default: "lts/*"
        description: "Node.js version to use"
      test_command:
        required: false
        type: string
        default: "npm test"
        description: "Command to run pre-build tests"
      build_command:
        required: false
        type: string
        default: "npm run build:ci"
        description: "Command to build package (should include post-build tests)"
      publish_command:
        required: false
        type: string
        default: "npm publish --access public"
        description: "Command to publish package"
      skip_publish:
        required: false
        type: boolean
        default: false
        description: "Skip NPM publishing (for testing)"
      package_manager:
        required: false
        type: string
        default: "npm"
        description: "Package manager (npm or yarn)"
    secrets:
      NPM_TOKEN:
        required: true
    outputs:
      published:
        description: "Whether package was published"
        value: ${{ jobs.publish-to-npm.outputs.published }}
      version:
        description: "The published version"
        value: ${{ jobs.detect-release.outputs.version }}

jobs:
  detect-release:
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.check.outputs.should-release }}
      version: ${{ steps.check.outputs.version }}
      is-prerelease: ${{ steps.check.outputs.is-prerelease }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check if this is a release merge
        id: check
        run: |
          # Get the latest commit message
          COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          echo "Latest commit: $COMMIT_MSG"

          # Check for version bump commit or release PR merge
          if [[ $COMMIT_MSG =~ ^chore:\ bump\ version\ to\ ([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            VERSION="${BASH_REMATCH[1]}"
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
            echo "🚀 Version bump commit detected for version $VERSION"
          elif [[ $COMMIT_MSG =~ release:\ v([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            VERSION="${BASH_REMATCH[1]}"
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
            echo "🚀 Release PR merge detected for version $VERSION"
          elif [[ $COMMIT_MSG =~ Merge\ pull\ request.*release.*v([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            VERSION="${BASH_REMATCH[1]}"
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
            echo "🚀 Release PR merge detected for version $VERSION"
          else
            echo "should-release=false" >> $GITHUB_OUTPUT
            echo "ℹ️ Not a release commit"
          fi

  build-and-test:
    needs: detect-release
    if: needs.detect-release.outputs.should-release == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: |
          if [ "${{ inputs.package_manager }}" = "yarn" ]; then
            yarn install --frozen-lockfile
          else
            npm ci
          fi

      - name: Run pre-build tests
        run: ${{ inputs.test_command }}
        env:
          NODE_ENV: development
          NODE_OPTIONS: --conditions=development

      - name: Build package (includes post-build tests)
        run: ${{ inputs.build_command }}
        env:
          NODE_ENV: production

  create-github-release:
    needs: [detect-release, build-and-test]
    runs-on: ubuntu-latest
    outputs:
      release-id: ${{ steps.create-release.outputs.id }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate release notes
        id: release-notes
        run: |
          VERSION="${{ needs.detect-release.outputs.version }}"

          # Try to find the last release tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            echo "No previous tags found, using initial commit"
            COMMIT_RANGE="$(git rev-list --max-parents=0 HEAD)..HEAD"
          else
            echo "Last tag: $LAST_TAG"
            COMMIT_RANGE="$LAST_TAG..HEAD"
          fi

          echo "## 🚀 What's Changed" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md

          # Breaking Changes
          echo "### 💥 Breaking Changes" >> RELEASE_NOTES.md
          BREAKING=$(git log $COMMIT_RANGE --grep="!" --pretty=format:"- %s (%h)" | head -10)
          BREAKING_BODY=$(git log $COMMIT_RANGE --grep="BREAKING CHANGE" --pretty=format:"- %s (%h)" | head -10)
          if [[ -n "$BREAKING" ]] || [[ -n "$BREAKING_BODY" ]]; then
            echo "$BREAKING" >> RELEASE_NOTES.md
            echo "$BREAKING_BODY" >> RELEASE_NOTES.md
          else
            echo "_No breaking changes_" >> RELEASE_NOTES.md
          fi
          echo "" >> RELEASE_NOTES.md

          # Features
          echo "### ✨ Features" >> RELEASE_NOTES.md
          FEATURES=$(git log $COMMIT_RANGE --grep="^feat:" --pretty=format:"- %s (%h)" | head -10)
          if [[ -n "$FEATURES" ]]; then
            echo "$FEATURES" >> RELEASE_NOTES.md
          else
            echo "_No new features_" >> RELEASE_NOTES.md
          fi
          echo "" >> RELEASE_NOTES.md

          # Bug Fixes
          echo "### 🐛 Bug Fixes" >> RELEASE_NOTES.md
          FIXES=$(git log $COMMIT_RANGE --grep="^fix:" --pretty=format:"- %s (%h)" | head -10)
          if [[ -n "$FIXES" ]]; then
            echo "$FIXES" >> RELEASE_NOTES.md
          else
            echo "_No bug fixes_" >> RELEASE_NOTES.md
          fi
          echo "" >> RELEASE_NOTES.md

          # Other Changes
          echo "### 🔧 Other Changes" >> RELEASE_NOTES.md
          OTHER=$(git log $COMMIT_RANGE --invert-grep --grep="^feat:" --grep="^fix:" --grep="!" --grep="^chore: bump version" --pretty=format:"- %s (%h)" | head -5)
          if [[ -n "$OTHER" ]]; then
            echo "$OTHER" >> RELEASE_NOTES.md
          else
            echo "_No other changes_" >> RELEASE_NOTES.md
          fi
          echo "" >> RELEASE_NOTES.md

          # Installation
          echo "## 📦 Installation" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo '```bash' >> RELEASE_NOTES.md
          echo "${{ inputs.package_name }}@$VERSION" >> RELEASE_NOTES.md
          if [ "${{ inputs.package_manager }}" = "yarn" ]; then
            echo "yarn add ${{ inputs.package_name }}@$VERSION" >> RELEASE_NOTES.md
          else
            echo "npm install ${{ inputs.package_name }}@$VERSION" >> RELEASE_NOTES.md
          fi
          echo '```' >> RELEASE_NOTES.md

      - name: Create GitHub Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.detect-release.outputs.version }}
          release_name: "${{ inputs.package_name }} v${{ needs.detect-release.outputs.version }}"
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: ${{ needs.detect-release.outputs.is-prerelease }}

  publish-to-npm:
    needs: [detect-release, build-and-test, create-github-release]
    if: inputs.skip_publish != true
    runs-on: ubuntu-latest
    outputs:
      published: ${{ steps.publish.outputs.published }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: |
          if [ "${{ inputs.package_manager }}" = "yarn" ]; then
            yarn install --frozen-lockfile
          else
            npm ci
          fi

      - name: Build package (includes all tests)
        run: ${{ inputs.build_command }}
        env:
          NODE_ENV: production

      - name: Publish to NPM
        id: publish
        run: |
          echo "🚀 Publishing ${{ inputs.package_name }} v${{ needs.detect-release.outputs.version }}"
          ${{ inputs.publish_command }}
          echo "published=true" >> $GITHUB_OUTPUT
          echo "✅ Successfully published to NPM"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Add success comment to commit
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ needs.detect-release.outputs.version }}';
            const packageName = '${{ inputs.package_name }}';
            const comment = `🎉 **Successfully published to NPM!**

            📦 **Package:** [${packageName}@${version}](https://www.npmjs.com/package/${packageName}/v/${version})
            🏷️ **Version:** ${version}
            📥 **Install:** \`npm install ${packageName}@${version}\`

            The package is now available for installation! 🚀`;

            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: comment
            });

  notify-completion:
    needs: [detect-release, create-github-release, publish-to-npm]
    if: always() && needs.detect-release.outputs.should-release == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Release completion summary
        run: |
          VERSION="${{ needs.detect-release.outputs.version }}"
          PACKAGE="${{ inputs.package_name }}"

          echo "🎊 Release $PACKAGE v$VERSION completed!"
          echo "✅ GitHub Release: Created"

          if [[ "${{ needs.publish-to-npm.outputs.published }}" == "true" ]]; then
            echo "✅ NPM Publish: Success"
          elif [[ "${{ inputs.skip_publish }}" == "true" ]]; then
            echo "⏭️ NPM Publish: Skipped (configured)"
          else
            echo "❌ NPM Publish: Failed"
            exit 1
          fi

          echo ""
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/v$VERSION"
          echo "📦 NPM URL: https://www.npmjs.com/package/$PACKAGE/v/$VERSION"
