# CLDMV/.github/.github/workflows/ci-jobs.yml
name: ‚öôÔ∏è CI Jobs Workflow (Internal Org-Level)

on:
  workflow_call:
    inputs:
      debug:
        description: "Enable debug logging for troubleshooting"
        required: false
        type: boolean
        default: false
      run_download_artifacts:
        description: "Run download artifacts job"
        required: false
        type: boolean
        default: false
      download_artifact_name:
        description: "Name of the artifact to download (e.g., build-artifacts-lts). Defaults to build-artifacts-lts or build-artifacts-{node_version}."
        required: false
        type: string
        default: ${{ inputs.node_version && format('build-artifacts-{0}', inputs.node_version == 'lts/*' && 'lts' || inputs.node_version) || 'build-artifacts-lts' }}
      download_artifact_path:
        description: "Destination path for the downloaded artifact(s)"
        required: false
        type: string
        default: "."
      # Package information
      package_name:
        description: "NPM package name (e.g., @cldmv/slothlet)"
        required: true
        type: string

      # Job control flags - all default to false
      run_build_and_test:
        description: "Run build and test job"
        required: false
        type: boolean
        default: false
      run_create_release_pr:
        description: "Run create release PR job"
        required: false
        type: boolean
        default: false
      run_create_release:
        description: "Run create GitHub release job"
        required: false
        type: boolean
        default: false
      run_detect_release:
        description: "Run detect release job"
        required: false
        type: boolean
        default: false
      run_update_major_version_tags:
        description: "Run update major version tags job"
        required: false
        type: boolean
        default: false
      run_fix_bot_signatures:
        description: "Run fix non-bot-signed version tags job"
        required: false
        type: boolean
        default: false
      run_update_version_tags:
        description: "Run update major/minor version tags job"
        required: false
        type: boolean
        default: false
      run_publish_npm:
        description: "Run publish to NPM job"
        required: false
        type: boolean
        default: false
      run_publish_github_packages:
        description: "Run publish to GitHub Packages job"
        required: false
        type: boolean
        default: false
      run_detect_repo_config:
        description: "Run detect repository config job"
        required: false
        type: boolean
        default: false

      # Build and test parameters
      node_version:
        description: "Node.js version to use (default: lts/*)"
        required: false
        type: string
        default: "lts/*"
      min_node_version:
        description: "Minimum Node.js version to test (e.g., 16.4)"
        required: false
        type: string
        default: "20"
      max_node_major:
        description: "Override max Node.js major version (default: 22)"
        required: false
        type: string
        default: "22"
      package_manager:
        description: "Package manager (npm or yarn)"
        required: false
        type: string
        default: "npm"
      test_command:
        description: "Command to run tests"
        required: false
        type: string
        default: "npm test"
      build_command:
        description: "Command to build package"
        required: false
        type: string
        default: "npm run build:ci"
      # Test control options
      skip_performance_tests:
        description: "Skip performance tests during CI"
        required: false
        type: boolean
        default: false
      skip_matrix_tests:
        description: "Skip matrix testing (use single node version only)"
        required: false
        type: boolean
        default: false

      # Release parameters
      version_bump:
        description: "Type of version bump (major, minor, patch). Leave empty for auto-detection from commit message."
        required: false
        type: string
        default: ""
      version:
        description: "Specific version for release"
        required: false
        type: string
        default: ""
      is_prerelease:
        description: "Whether this is a prerelease"
        required: false
        type: boolean
        default: false
      release_source_only:
        description: "Whether to create source-only release (no package assets)"
        required: false
        type: boolean
        default: false

      # Publishing parameters
      publish_command_npm:
        description: "Command to publish to NPM"
        required: false
        type: string
        default: ""
      publish_command_github_packages:
        description: "Command to publish to GitHub Packages"
        required: false
        type: string
        default: ""

      # Documentation parameters
      create_documentation:
        description: "Whether to create/update VERSION_TAGS.md"
        required: false
        type: boolean
        default: true

      # Version tag parameters
      sign:
        description: "Smart signing mode (auto/true/false)"
        required: false
        type: string
        default: "auto"
      annotate:
        description: "Smart annotate mode (auto/true/false)"
        required: false
        type: string
        default: "auto"
      use_gpg:
        description: "If true, forward provided secrets to enable signing"
        required: false
        type: boolean
        default: false

    secrets:
      NPM_TOKEN:
        description: "NPM token for publishing packages"
        required: false
      BOT_APP_ID:
        description: "GitHub App ID for CLDMV bot"
        required: false
      BOT_APP_PRIVATE_KEY:
        description: "GitHub App private key for CLDMV bot"
        required: false
      TAGGER_NAME:
        description: "GPG tagger name for signing"
        required: false
      TAGGER_EMAIL:
        description: "GPG tagger email for signing"
        required: false
      GPG_PRIVATE_KEY:
        description: "ASCII-armored private key for signing"
        required: false
      GPG_PASSPHRASE:
        description: "Passphrase for the private key (if protected)"
        required: false

    outputs:
      # Release management outputs
      pr-created:
        description: "Whether a release PR was created"
        value: ${{ jobs.create-release-pr.outputs.pr-created }}
      pr-number:
        description: "The number of the created release PR"
        value: ${{ jobs.create-release-pr.outputs.pr-number }}
      new-version:
        description: "The new version that will be released"
        value: ${{ jobs.create-release-pr.outputs.new-version }}

      # Release detection outputs
      should-release:
        description: "Whether this commit should trigger a release"
        value: ${{ jobs.detect-release.outputs.should-release }}

      # GitHub release outputs
      release-id:
        description: "The ID of the created GitHub release"
        value: ${{ jobs.create-release.outputs.release-id }}

      # Publishing outputs
      npm-published:
        description: "Whether the package was published to NPM"
        value: ${{ jobs.publish-npm.outputs.published }}
      github-packages-published:
        description: "Whether the package was published to GitHub Packages"
        value: ${{ jobs.publish-github-packages.outputs.published }}

      # Version tag outputs
      major-version:
        description: "The major version tag that was updated"
        value: ${{ jobs.update-version-tags.outputs.major-version }}
      minor-version:
        description: "The minor version tag that was updated"
        value: ${{ jobs.update-version-tags.outputs.minor-version }}
      tags-updated:
        description: "Whether version tags were updated"
        value: ${{ jobs.update-version-tags.outputs.updated }}
      has-version-tags:
        description: "Whether the repository has version tags"
        value: ${{ jobs.update-version-tags.outputs.has-version-tags }}
      should-run:
        description: "Whether tag updates should run"
        value: ${{ jobs.update-version-tags.outputs.should-run }}
      fixed-orphans:
        description: "Orphaned tags that were fixed"
        value: ${{ jobs.update-version-tags.outputs.fixed-orphans }}
      orphans-found:
        description: "Whether orphaned tags were found"
        value: ${{ jobs.update-version-tags.outputs.orphans-found }}
      fixed-bot-signatures:
        description: "Non-bot tags that were fixed"
        value: ${{ jobs.fix-bot-signatures.outputs.fixed-tags }}
      non-bot-tags-found:
        description: "Whether non-bot tags were found"
        value: ${{ jobs.fix-bot-signatures.outputs.non-bot-tags-found }}

jobs:
  set-matrix:
    name: "Set Node.js Matrix"
    runs-on: ubuntu-latest
    if: inputs.run_build_and_test == true
    outputs:
      node-matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          # Check if matrix testing is skipped
          if [[ "${{ inputs.skip_matrix_tests }}" == "true" ]]; then
            # Use single node version
            SINGLE_VERSION="${{ inputs.node_version }}"
            echo "üìç Matrix testing skipped, using single version: $SINGLE_VERSION"
            echo "matrix=[\"$SINGLE_VERSION\"]" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Build matrix from min to max versions
          MIN="${{ inputs.min_node_version }}"
          MAX_INPUT="${{ inputs.max_node_major }}"
          DEFAULT_MAX=22

          echo "üîç DEBUG (ci-jobs.yml): min_node_version = '$MIN'"
          echo "üîç DEBUG (ci-jobs.yml): max_node_major = '$MAX_INPUT'"

          if [[ -n "$MAX_INPUT" ]]; then
            MAX=$MAX_INPUT
          else
            MAX=$DEFAULT_MAX
          fi

          # Parse major and minor from min version
          MAJOR=$(echo $MIN | cut -d. -f1)
          MINOR=$(echo $MIN | cut -d. -f2)

          # Build versions array
          VERSIONS=()
          if [[ "$MIN" == *"."* ]]; then
            VERSIONS+=("\"${MAJOR}.${MINOR}\"")
            ((MAJOR++))
          fi
          while [ $MAJOR -le $MAX ]; do
            VERSIONS+=("\"${MAJOR}\"")
            ((MAJOR++))
          done
          VERSIONS+=("\"lts/*\"")

          # Join with commas and create JSON array
          printf -v joined '%s,' "${VERSIONS[@]}"
          joined="[${joined%,}]"
          echo "üìä Matrix testing enabled with versions: $joined"
          echo "matrix=$joined" >> $GITHUB_OUTPUT

  build-and-test:
    name: "üèóÔ∏è Build & Test"
    if: inputs.run_build_and_test == true
    runs-on: ubuntu-latest
    needs: set-matrix
    strategy:
      matrix:
        node-version: ${{ fromJson(needs.set-matrix.outputs.node-matrix) }}
    steps:
      - name: Build and Test
        uses: CLDMV/.github/.github/actions/npm/jobs/build-and-test@v1
        with:
          node-version: ${{ matrix.node-version }}
          package-manager: ${{ inputs.package_manager }}
          test-command: ${{ inputs.test_command }}
          build-command: ${{ inputs.build_command }}
          skip-performance-tests: ${{ inputs.skip_performance_tests }}

  detect-release:
    name: "üîç Detect Release"
    if: inputs.run_detect_release == true
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.detect.outputs.should-release }}
      version: ${{ steps.detect.outputs.version }}
      is-prerelease: ${{ steps.detect.outputs.is-prerelease }}
    steps:
      - name: Detect Release
        id: detect
        uses: CLDMV/.github/.github/actions/git/jobs/detect-release@v1

  create-release-pr:
    name: "üìã Create Release PR"
    if: inputs.run_create_release_pr == true
    runs-on: ubuntu-latest
    outputs:
      pr-created: ${{ steps.create.outputs.pr-created }}
      pr-number: ${{ steps.create.outputs.pr-number }}
      new-version: ${{ steps.create.outputs.new-version }}
    steps:
      - name: Create App token (auto-detect)
        id: app-token
        uses: CLDMV/.github/.github/actions/github/steps/create-app-token@v1
        with:
          app_id: ${{ secrets.BOT_APP_ID }}
          private_key: ${{ secrets.BOT_APP_PRIVATE_KEY }}
        env:
          BOT_APP_ID: ${{ secrets.BOT_APP_ID }}
          BOT_APP_PRIVATE_KEY: ${{ secrets.BOT_APP_PRIVATE_KEY }}

      - name: Create Release PR
        id: create
        uses: CLDMV/.github/.github/actions/github/jobs/create-release-pr@v1
        with:
          package-name: ${{ inputs.package_name }}
          node-version: ${{ inputs.node_version }}
          package-manager: ${{ inputs.package_manager }}
          build-command: ${{ inputs.build_command }}
          version-bump: ${{ inputs.version_bump }}
          github-token: ${{ steps.app-token.outputs.token }}
    #   - name: Dispatch CI for PR branch
    #     uses: actions/github-script@v7
    #     with:
    #       github-token: ${{ secrets.GITHUB_TOKEN }}
    #       script: |
    #         await github.actions.createWorkflowDispatch({
    #           owner: context.repo.owner,
    #           repo: context.repo.repo,
    #           workflow_id: "ci.yml",             // or the numeric ID
    #           ref: process.env.GITHUB_REF_NAME,  // PR branch name
    #           inputs: { debug: "false" }
    #         })
  download-artifacts:
    name: "‚¨áÔ∏è Download Artifacts"
    if: inputs.run_download_artifacts == true
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.download_artifact_name }}
          path: ${{ inputs.download_artifact_path }}

  create-release:
    name: "üìã Create GitHub Release"
    if: inputs.run_create_release == true
    runs-on: ubuntu-latest
    needs: build-and-test
    outputs:
      release-id: ${{ steps.create.outputs.release-id }}
    steps:
      - name: Create App token (auto-detect)
        id: app-token
        uses: CLDMV/.github/.github/actions/github/steps/create-app-token@v1
        with:
          app_id: ${{ secrets.BOT_APP_ID }}
          private_key: ${{ secrets.BOT_APP_PRIVATE_KEY }}
        env:
          BOT_APP_ID: ${{ secrets.BOT_APP_ID }}
          BOT_APP_PRIVATE_KEY: ${{ secrets.BOT_APP_PRIVATE_KEY }}

      - name: Create GitHub Release
        id: create
        uses: CLDMV/.github/.github/actions/github/jobs/create-release@v1
        with:
          version: ${{ inputs.version }}
          package-name: ${{ inputs.package_name }}
          is-prerelease: ${{ inputs.is_prerelease }}
          package-manager: ${{ inputs.package_manager }}
          release-source-only: ${{ inputs.release_source_only }}
          node-version: ${{ inputs.node_version }}
          build-command: ${{ inputs.build_command }}
          github-token: ${{ steps.app-token.outputs.token }}

  detect-repo-config:
    name: "üîß Detect Repository Config"
    if: inputs.run_detect_repo_config == true
    runs-on: ubuntu-latest
    outputs:
      npm-command: ${{ steps.detect.outputs.npm-command }}
      github-packages-command: ${{ steps.detect.outputs.github-packages-command }}
      repo-is-private: ${{ steps.detect.outputs.repo-is-private }}
    steps:
      - name: Detect Repository Config
        id: detect
        uses: CLDMV/.github/.github/actions/github/jobs/detect-repo-config@v1
        with:
          package-manager: ${{ inputs.package_manager }}
          custom-npm-command: ${{ inputs.publish_command_npm }}
          custom-github-packages-command: ${{ inputs.publish_command_github_packages }}
          github-token: ${{ github.token }}

  publish-npm:
    name: "üì¶ Publish to NPM"
    if: inputs.run_publish_npm == true
    runs-on: ubuntu-latest
    needs: build-and-test
    outputs:
      published: ${{ steps.publish.outputs.published }}
    steps:
      - name: Publish to NPM
        id: publish
        uses: CLDMV/.github/.github/actions/npm/jobs/publish-npm@v1
        with:
          package-name: ${{ inputs.package_name }}
          version: ${{ inputs.version }}
          node-version: ${{ inputs.node_version }}
          package-manager: ${{ inputs.package_manager }}
          publish-command: ${{ inputs.publish_command_npm }}
          npm-token: ${{ secrets.NPM_TOKEN }}

  publish-github-packages:
    name: "üì¶ Publish to GitHub Packages"
    if: inputs.run_publish_github_packages == true
    runs-on: ubuntu-latest
    needs: build-and-test
    outputs:
      published: ${{ steps.publish.outputs.published }}
    steps:
      - name: Publish to GitHub Packages
        id: publish
        uses: CLDMV/.github/.github/actions/npm/jobs/publish-github-packages@v1
        with:
          package-name: ${{ inputs.package_name }}
          version: ${{ inputs.version }}
          node-version: ${{ inputs.node_version }}
          package-manager: ${{ inputs.package_manager }}
          publish-command: ${{ inputs.publish_command_github_packages }}
          github-token: ${{ github.token }}

  fix-bot-signatures:
    name: "ü§ñ Fix Non-Bot-Signed Version Tags"
    if: inputs.run_fix_bot_signatures == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      fixed-tags: ${{ steps.fix-bot-signatures.outputs.fixed-tags }}
      non-bot-tags-found: ${{ steps.fix-bot-signatures.outputs.non-bot-tags-found }}
    steps:
      - name: Create App token (auto-detect)
        id: app-token
        uses: CLDMV/.github/.github/actions/github/steps/create-app-token@v1
        with:
          app_id: ${{ secrets.BOT_APP_ID }}
          private_key: ${{ secrets.BOT_APP_PRIVATE_KEY }}
        env:
          BOT_APP_ID: ${{ secrets.BOT_APP_ID }}
          BOT_APP_PRIVATE_KEY: ${{ secrets.BOT_APP_PRIVATE_KEY }}

      - name: Fix non-bot-signed version tags
        id: fix-bot-signatures
        uses: CLDMV/.github/.github/actions/git/jobs/fix-non-bot-tags@v1
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          CI_DEBUG: ${{ inputs.debug && 'true' || 'false' }}
        with:
          debug: ${{ inputs.debug }}
          sign: ${{ inputs.sign || 'auto' }}
          annotate: ${{ inputs.annotate }}
          # forward identity & GPG only if toggled on
          tagger_name: ${{ inputs.use_gpg && secrets.TAGGER_NAME   || '' }}
          tagger_email: ${{ inputs.use_gpg && secrets.TAGGER_EMAIL  || '' }}
          gpg_private_key: ${{ inputs.use_gpg && secrets.GPG_PRIVATE_KEY || '' }}
          gpg_passphrase: ${{ inputs.use_gpg && secrets.GPG_PASSPHRASE  || '' }}

  update-version-tags:
    name: "üè∑Ô∏è Update Major/Minor Version Tags"
    if: inputs.run_update_version_tags == true
    runs-on: ubuntu-latest
    needs: fix-bot-signatures
    permissions:
      contents: write
    outputs:
      major-version: ${{ steps.tags.outputs.major-version }}
      minor-version: ${{ steps.tags.outputs.minor-version }}
      updated: ${{ steps.tags.outputs.updated }}
      has-version-tags: ${{ steps.tags.outputs.has-version-tags }}
      should-run: ${{ steps.tags.outputs.should-run }}
      fixed-orphans: ${{ steps.tags.outputs.fixed-orphans }}
      orphans-found: ${{ steps.tags.outputs.orphans-found }}
      # Pass through outputs from first job
      fixed-bot-signatures: ${{ needs.fix-bot-signatures.outputs.fixed-tags }}
      non-bot-tags-found: ${{ needs.fix-bot-signatures.outputs.non-bot-tags-found }}
    steps:
      - name: Create App token (auto-detect)
        id: app-token
        uses: CLDMV/.github/.github/actions/github/steps/create-app-token@v1
        with:
          app_id: ${{ secrets.BOT_APP_ID }}
          private_key: ${{ secrets.BOT_APP_PRIVATE_KEY }}
        env:
          BOT_APP_ID: ${{ secrets.BOT_APP_ID }}
          BOT_APP_PRIVATE_KEY: ${{ secrets.BOT_APP_PRIVATE_KEY }}

      - name: Check for version tags and update
        id: tags
        uses: CLDMV/.github/.github/actions/git/jobs/update-major-version-tags@v1
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          CI_DEBUG: ${{ inputs.debug && 'true' || 'false' }}
        with:
          debug: ${{ inputs.debug }}
          create-documentation: ${{ inputs.create_documentation }}
          sign: ${{ inputs.sign }}
          annotate: ${{ inputs.annotate }}

          # forward identity & GPG only if toggled on
          tagger_name: ${{ inputs.use_gpg && secrets.TAGGER_NAME   || '' }}
          tagger_email: ${{ inputs.use_gpg && secrets.TAGGER_EMAIL  || '' }}
          gpg_private_key: ${{ inputs.use_gpg && secrets.GPG_PRIVATE_KEY || '' }}
          gpg_passphrase: ${{ inputs.use_gpg && secrets.GPG_PASSPHRASE  || '' }}
