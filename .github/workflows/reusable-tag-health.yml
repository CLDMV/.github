# Tag Health Workflow Package
name: üè∑Ô∏è Tag Health Management Jobs

on:
  workflow_call:
    inputs:
      # Debug control
      debug:
        description: "Enable debug logging for troubleshooting"
        required: false
        type: boolean
        default: false

      # Job control flags
      run_fix_bot_signatures:
        description: "Run fix non-bot-signed version tags job"
        required: false
        type: boolean
        default: false
      run_update_version_tags:
        description: "Run update major/minor version tags job"
        required: false
        type: boolean
        default: false
      run_unified_tag_health:
        description: "Run unified tag health check (replaces run_fix_bot_signatures + run_update_version_tags)"
        required: false
        type: boolean
        default: false

      # Documentation parameters
      create_documentation:
        description: "Whether to create/update VERSION_TAGS.md"
        required: false
        type: boolean
        default: true

      # GPG configuration
      use_gpg:
        description: "If true, forward provided secrets to enable signing"
        required: false
        type: boolean
        default: false

      # Tag health configuration
      max_tags:
        description: "Maximum number of tags to process (safety limit)"
        required: false
        type: string
        default: "100"
      max_major_versions:
        description: "Maximum number of major versions to process"
        required: false
        type: string
        default: "10"
      max_minor_versions:
        description: "Maximum number of minor versions per major to process"
        required: false
        type: string
        default: "10"
      bot_patterns:
        description: "JSON array of bot name patterns to identify bot signatures"
        required: false
        type: string
        default: '["CLDMV Bot", "cldmv-bot", "github-actions[bot]"]'
      include_patterns:
        description: "JSON array of tag patterns to include (e.g. ['v*', 'release-*'])"
        required: false
        type: string
        default: '["v*"]'
      exclude_patterns:
        description: "JSON array of tag patterns to exclude"
        required: false
        type: string
        default: "[]"

    secrets:
      BOT_APP_ID:
        description: "GitHub App ID for CLDMV bot"
        required: false
      BOT_APP_PRIVATE_KEY:
        description: "GitHub App private key for CLDMV bot"
        required: false
      TAGGER_NAME:
        description: "GPG tagger name for signing"
        required: false
      TAGGER_EMAIL:
        description: "GPG tagger email for signing"
        required: false
      GPG_PRIVATE_KEY:
        description: "ASCII-armored private key for signing"
        required: false
      GPG_PASSPHRASE:
        description: "Passphrase for the private key (if protected)"
        required: false

    outputs:
      # Version tag outputs
      major-version:
        description: "The major version tag that was updated"
        value: ${{ jobs.update-version-tags.outputs.major-version || jobs.unified-tag-health.outputs.major-version }}
      minor-version:
        description: "The minor version tag that was updated"
        value: ${{ jobs.update-version-tags.outputs.minor-version || jobs.unified-tag-health.outputs.minor-version }}
      tags-updated:
        description: "Whether version tags were updated"
        value: ${{ jobs.update-version-tags.outputs.updated || jobs.unified-tag-health.outputs.updated }}
      has-version-tags:
        description: "Whether the repository has version tags"
        value: ${{ jobs.update-version-tags.outputs.has-version-tags || jobs.unified-tag-health.outputs.has-version-tags }}
      should-run:
        description: "Whether tag updates should run"
        value: ${{ jobs.update-version-tags.outputs.should-run || jobs.unified-tag-health.outputs.should-run }}
      fixed-orphans:
        description: "Orphaned tags that were fixed"
        value: ${{ jobs.update-version-tags.outputs.fixed-orphans || jobs.unified-tag-health.outputs.fixed-orphans }}
      orphans-found:
        description: "Whether orphaned tags were found"
        value: ${{ jobs.update-version-tags.outputs.orphans-found || jobs.unified-tag-health.outputs.orphans-found }}
      fixed-bot-signatures:
        description: "Non-bot tags that were fixed"
        value: ${{ jobs.fix-bot-signatures.outputs.fixed-tags || jobs.unified-tag-health.outputs.fixed-bot-signatures }}
      non-bot-tags-found:
        description: "Whether non-bot tags were found"
        value: ${{ jobs.fix-bot-signatures.outputs.non-bot-tags-found || jobs.unified-tag-health.outputs.non-bot-tags-found }}
      # Unified outputs
      total_processed:
        description: "Total number of tags processed"
        value: ${{ jobs.unified-tag-health.outputs.total_processed }}
      total_fixed:
        description: "Total number of tags fixed across all steps"
        value: ${{ jobs.unified-tag-health.outputs.total_fixed }}
      processing_summary:
        description: "Summary of all processing steps"
        value: ${{ jobs.unified-tag-health.outputs.processing_summary }}

jobs:
  # Auto-detect GPG capability once at the beginning
  detect-gpg:
    name: "üîê Detect GPG Capability"
    runs-on: ubuntu-latest
    outputs:
      gpg-enabled: ${{ steps.detect.outputs.gpg-enabled }}
    steps:
      - name: Detect GPG capability
        id: detect
        run: |
          # Auto-detect based on use_gpg input AND GPG_PRIVATE_KEY availability
          if [[ "${{ inputs.use_gpg }}" == "true" && -n "${{ secrets.GPG_PRIVATE_KEY }}" ]]; then
            echo "gpg-enabled=true" >> $GITHUB_OUTPUT
            echo "‚úÖ GPG signing enabled (use_gpg=true, GPG_PRIVATE_KEY available)"
          else
            echo "gpg-enabled=false" >> $GITHUB_OUTPUT
            if [[ "${{ inputs.use_gpg }}" != "true" ]]; then
              echo "üîí GPG signing disabled (use_gpg=false)"
            else
              echo "‚ö†Ô∏è GPG signing disabled (GPG_PRIVATE_KEY not available)"
            fi
          fi

  fix-bot-signatures:
    name: "ü§ñ Fix Non-Bot-Signed Version Tags"
    if: inputs.run_fix_bot_signatures == true
    needs: [detect-gpg]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      fixed-tags: ${{ steps.fix-bot-signatures.outputs.fixed-tags }}
      non-bot-tags-found: ${{ steps.fix-bot-signatures.outputs.non-bot-tags-found }}
    steps:
      - name: Create App token (auto-detect)
        id: app-token
        uses: CLDMV/.github/.github/actions/github/steps/create-app-token@v1
        with:
          app_id: ${{ secrets.BOT_APP_ID }}
          private_key: ${{ secrets.BOT_APP_PRIVATE_KEY }}
        env:
          BOT_APP_ID: ${{ secrets.BOT_APP_ID }}
          BOT_APP_PRIVATE_KEY: ${{ secrets.BOT_APP_PRIVATE_KEY }}

      - name: Fix non-bot-signed version tags
        id: fix-bot-signatures
        uses: CLDMV/.github/.github/actions/git/jobs/fix-non-bot-tags@v1
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          CI_DEBUG: ${{ inputs.debug && 'true' || 'false' }}
        with:
          debug: ${{ inputs.debug }}
          gpg_enabled: ${{ needs.detect-gpg.outputs.gpg-enabled }}
          tagger_name: ${{ secrets.TAGGER_NAME }}
          tagger_email: ${{ secrets.TAGGER_EMAIL }}
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg_passphrase: ${{ secrets.GPG_PASSPHRASE }}

  update-version-tags:
    name: "üè∑Ô∏è Update Major/Minor Version Tags"
    if: inputs.run_update_version_tags == true
    runs-on: ubuntu-latest
    needs: [detect-gpg, fix-bot-signatures]
    permissions:
      contents: write
    outputs:
      major-version: ${{ steps.tags.outputs.major-version }}
      minor-version: ${{ steps.tags.outputs.minor-version }}
      updated: ${{ steps.tags.outputs.updated }}
      has-version-tags: ${{ steps.tags.outputs.has-version-tags }}
      should-run: ${{ steps.tags.outputs.should-run }}
      fixed-orphans: ${{ steps.tags.outputs.fixed-orphans }}
      orphans-found: ${{ steps.tags.outputs.orphans-found }}
      # Pass through outputs from first job
      fixed-bot-signatures: ${{ needs.fix-bot-signatures.outputs.fixed-tags }}
      non-bot-tags-found: ${{ needs.fix-bot-signatures.outputs.non-bot-tags-found }}
    steps:
      - name: Create App token (auto-detect)
        id: app-token
        uses: CLDMV/.github/.github/actions/github/steps/create-app-token@v1
        with:
          app_id: ${{ secrets.BOT_APP_ID }}
          private_key: ${{ secrets.BOT_APP_PRIVATE_KEY }}
        env:
          BOT_APP_ID: ${{ secrets.BOT_APP_ID }}
          BOT_APP_PRIVATE_KEY: ${{ secrets.BOT_APP_PRIVATE_KEY }}

      - name: Check for version tags and update
        id: tags
        uses: CLDMV/.github/.github/actions/git/jobs/update-major-version-tags@v1
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          CI_DEBUG: ${{ inputs.debug && 'true' || 'false' }}
        with:
          debug: ${{ inputs.debug }}
          create-documentation: ${{ inputs.create_documentation }}

          # forward identity & GPG based on detection
          tagger_name: ${{ needs.detect-gpg.outputs.gpg-enabled && secrets.TAGGER_NAME   || '' }}
          tagger_email: ${{ needs.detect-gpg.outputs.gpg-enabled && secrets.TAGGER_EMAIL  || '' }}
          gpg_private_key: ${{ needs.detect-gpg.outputs.gpg-enabled && secrets.GPG_PRIVATE_KEY || '' }}
          gpg_passphrase: ${{ needs.detect-gpg.outputs.gpg-enabled && secrets.GPG_PASSPHRASE  || '' }}

  unified-tag-health:
    name: "üè∑Ô∏è Unified Tag Health Check"
    needs: [detect-gpg]
    if: inputs.run_unified_tag_health == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      total_processed: ${{ steps.summarize.outputs.total-processed }}
      total_fixed: ${{ steps.summarize.outputs.total-fixed }}
      processing_summary: ${{ steps.summarize.outputs.processing-summary }}
      # Individual step outputs for compatibility
      fixed-bot-signatures: ${{ steps.fix-bot-sigs.outputs.fixed_count }}
      non-bot-tags-found: ${{ steps.fix-bot-sigs.outputs.fixed_count }}
      major-version: ${{ steps.update-major-tags.outputs.major-version }}
      minor-version: ${{ steps.update-major-tags.outputs.minor-version }}
      updated: ${{ steps.update-major-tags.outputs.updated }}
      has-version-tags: ${{ steps.update-major-tags.outputs.has-version-tags }}
      should-run: ${{ steps.update-major-tags.outputs.should-run }}
      fixed-orphans: ${{ steps.update-major-tags.outputs.fixed-orphans }}
      orphans-found: ${{ steps.update-major-tags.outputs.orphans-found }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Git identity
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create App token (auto-detect)
        id: app-token
        uses: CLDMV/.github/.github/actions/github/steps/create-app-token@v1
        with:
          app_id: ${{ secrets.BOT_APP_ID }}
          private_key: ${{ secrets.BOT_APP_PRIVATE_KEY }}
        env:
          BOT_APP_ID: ${{ secrets.BOT_APP_ID }}
          BOT_APP_PRIVATE_KEY: ${{ secrets.BOT_APP_PRIVATE_KEY }}

      # Step 1: Get detailed tag list for processing
      - name: Get tags to process
        id: get-tags
        uses: CLDMV/.github/.github/actions/git/steps/get-detailed-tags@v1
        with:
          debug: ${{ inputs.debug }}
          max_tags: ${{ inputs.max_tags }}
          max_major_versions: ${{ inputs.max_major_versions }}
          max_minor_versions: ${{ inputs.max_minor_versions }}
          bot_patterns: ${{ inputs.bot_patterns }}
          include_patterns: ${{ inputs.include_patterns }}
          exclude_patterns: ${{ inputs.exclude_patterns }}

      # Step 2: Update major/minor version tags FIRST (creates new tags if needed)
      - name: Update major/minor version tags
        id: update-major-tags
        uses: CLDMV/.github/.github/actions/git/jobs/update-major-version-tags@v1
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          CI_DEBUG: ${{ inputs.debug && 'true' || 'false' }}
        with:
          debug: ${{ inputs.debug }}
          create-documentation: ${{ inputs.create_documentation }}
          gpg_enabled: ${{ needs.detect-gpg.outputs.gpg-enabled }}
          tagger_name: ${{ secrets.TAGGER_NAME }}
          tagger_email: ${{ secrets.TAGGER_EMAIL }}
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg_passphrase: ${{ secrets.GPG_PASSPHRASE }}

      # Step 3: Re-scan tags after major/minor updates
      - name: Re-scan tags after major/minor updates
        id: rescan-after-major
        uses: CLDMV/.github/.github/actions/git/steps/get-detailed-tags@v1
        with:
          debug: ${{ inputs.debug }}
          max_tags: ${{ inputs.max_tags }}
          max_major_versions: ${{ inputs.max_major_versions }}
          max_minor_versions: ${{ inputs.max_minor_versions }}
          bot_patterns: ${{ inputs.bot_patterns }}
          include_patterns: ${{ inputs.include_patterns }}
          exclude_patterns: ${{ inputs.exclude_patterns }}

      # Step 4: Fix non-bot signatures (using fresh tag data)
      - name: Fix non-bot signatures
        id: fix-bot-sigs
        uses: CLDMV/.github/.github/actions/git/steps/fix-non-bot-tags@v1
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          CI_DEBUG: ${{ inputs.debug && 'true' || 'false' }}
        with:
          debug: ${{ inputs.debug }}
          tags_detailed: ${{ steps.rescan-after-major.outputs.tags_detailed }}
          gpg_enabled: ${{ needs.detect-gpg.outputs.gpg-enabled }}
          tagger_name: ${{ secrets.TAGGER_NAME }}
          tagger_email: ${{ secrets.TAGGER_EMAIL }}
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg_passphrase: ${{ secrets.GPG_PASSPHRASE }}

      # Step 5: Re-scan tags after bot signature fixes
      - name: Re-scan tags after bot signature fixes
        id: rescan-after-bot-sigs
        uses: CLDMV/.github/.github/actions/git/steps/get-detailed-tags@v1
        with:
          debug: ${{ inputs.debug }}
          max_tags: ${{ inputs.max_tags }}
          max_major_versions: ${{ inputs.max_major_versions }}
          max_minor_versions: ${{ inputs.max_minor_versions }}
          bot_patterns: ${{ inputs.bot_patterns }}
          include_patterns: ${{ inputs.include_patterns }}
          exclude_patterns: ${{ inputs.exclude_patterns }}

      # Step 6: Fix unsigned tags (using fresh tag data)
      - name: Fix unsigned tags
        id: fix-unsigned
        uses: CLDMV/.github/.github/actions/git/steps/fix-unsigned-tags@v1
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          CI_DEBUG: ${{ inputs.debug && 'true' || 'false' }}
        with:
          debug: ${{ inputs.debug }}
          tags_detailed: ${{ steps.rescan-after-bot-sigs.outputs.tags_detailed }}
          gpg_enabled: ${{ needs.detect-gpg.outputs.gpg-enabled }}
          tagger_name: ${{ secrets.TAGGER_NAME }}
          tagger_email: ${{ secrets.TAGGER_EMAIL }}
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg_passphrase: ${{ secrets.GPG_PASSPHRASE }}

      # Step 7: Re-scan tags after unsigned tag fixes
      - name: Re-scan tags after unsigned tag fixes
        id: rescan-after-unsigned
        uses: CLDMV/.github/.github/actions/git/steps/get-detailed-tags@v1
        with:
          debug: ${{ inputs.debug }}
          max_tags: ${{ inputs.max_tags }}
          max_major_versions: ${{ inputs.max_major_versions }}
          max_minor_versions: ${{ inputs.max_minor_versions }}
          bot_patterns: ${{ inputs.bot_patterns }}
          include_patterns: ${{ inputs.include_patterns }}
          exclude_patterns: ${{ inputs.exclude_patterns }}

      # Step 8: Fix orphaned tags (using fresh tag data)
      - name: Fix orphaned tags
        id: fix-orphaned
        uses: CLDMV/.github/.github/actions/git/steps/fix-orphaned-tags@v1
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          CI_DEBUG: ${{ inputs.debug && 'true' || 'false' }}
        with:
          debug: ${{ inputs.debug }}
          tags_detailed: ${{ steps.rescan-after-unsigned.outputs.tags_detailed }}
          gpg_enabled: ${{ needs.detect-gpg.outputs.gpg-enabled }}
          tagger_name: ${{ secrets.TAGGER_NAME }}
          tagger_email: ${{ secrets.TAGGER_EMAIL }}
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg_passphrase: ${{ secrets.GPG_PASSPHRASE }}

      # Step 9: Final scan for summary
      - name: Final tag scan for summary
        id: final-scan
        uses: CLDMV/.github/.github/actions/git/steps/get-detailed-tags@v1
        with:
          debug: ${{ inputs.debug }}
          max_tags: ${{ inputs.max_tags }}
          max_major_versions: ${{ inputs.max_major_versions }}
          max_minor_versions: ${{ inputs.max_minor_versions }}
          bot_patterns: ${{ inputs.bot_patterns }}
          include_patterns: ${{ inputs.include_patterns }}
          exclude_patterns: ${{ inputs.exclude_patterns }}

      # Step 10: Summarize all processing
      - name: Summarize processing
        id: summarize
        run: |
          echo "üîÑ Unified Tag Health Summary for ${{ github.repository }}:"

          INITIAL_COUNT="${{ steps.get-tags.outputs.tags_count }}"
          FINAL_COUNT="${{ steps.final-scan.outputs.tags_count }}"
          BOT_FIXED="${{ steps.fix-bot-sigs.outputs.fixed_count }}"
          UNSIGNED_FIXED="${{ steps.fix-unsigned.outputs.fixed_count }}"
          ORPHANED_FIXED="${{ steps.fix-orphaned.outputs.fixed_count }}"
          MAJOR_UPDATED="${{ steps.update-major-tags.outputs.updated == 'true' && '1' || '0' }}"

          TOTAL_FIXED=$((BOT_FIXED + UNSIGNED_FIXED + ORPHANED_FIXED + MAJOR_UPDATED))

          echo "  üìä Initial tags: $INITIAL_COUNT"
          echo "  üìå Major/minor tags updated: $MAJOR_UPDATED (ran first)"
          echo "  ü§ñ Bot signature fixes: $BOT_FIXED"
          echo "  üîè Unsigned tag fixes: $UNSIGNED_FIXED"
          echo "  üîó Orphaned tag fixes: $ORPHANED_FIXED"
          echo "  üìä Final tag count: $FINAL_COUNT"
          echo "  ‚úÖ Total operations: $TOTAL_FIXED"

          SUMMARY="Processed $INITIAL_COUNT tags for ${{ github.repository }}. Updated $MAJOR_UPDATED major/minor tags (first), then fixed: $BOT_FIXED bot signatures, $UNSIGNED_FIXED unsigned tags, $ORPHANED_FIXED orphaned tags. Final count: $FINAL_COUNT. Total operations: $TOTAL_FIXED"

          echo "total-processed=$INITIAL_COUNT" >> $GITHUB_OUTPUT
          echo "total-fixed=$TOTAL_FIXED" >> $GITHUB_OUTPUT
          echo "processing-summary=$SUMMARY" >> $GITHUB_OUTPUT
