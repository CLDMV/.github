# Publishing Workflow Package
name: üì¶ Publishing Jobs

on:
  workflow_call:
    inputs:
      # Package information
      package_name:
        description: "NPM package name (e.g., @cldmv/slothlet)"
        required: true
        type: string

      # Debug control
      debug:
        description: "Enable debug logging for troubleshooting"
        required: false
        type: boolean
        default: false
      dry_run:
        description: "Dry run mode - validate everything but don't publish or create releases"
        required: false
        type: boolean
        default: false

      # Job control flags
      run_detect_repo_config:
        description: "Run detect repository config job"
        required: false
        type: boolean
        default: false
      run_publish_npm:
        description: "Run publish to NPM job"
        required: false
        type: boolean
        default: false
      run_publish_github_packages:
        description: "Run publish to GitHub Packages job"
        required: false
        type: boolean
        default: false
      run_create_release:
        description: "Run create GitHub release job (after publishing)"
        required: false
        type: boolean
        default: false

      # Build parameters
      node_version:
        description: "Node.js version to use (default: lts/*)"
        required: false
        type: string
        default: "lts/*"
      package_manager:
        description: "Package manager (npm or yarn)"
        required: false
        type: string
        default: "npm"

      # Version parameter
      version:
        description: "Specific version for publishing"
        required: false
        type: string
        default: ""

      # Publishing parameters
      publish_command_npm:
        description: "Command to publish to NPM"
        required: false
        type: string
        default: ""
      publish_command_github_packages:
        description: "Command to publish to GitHub Packages"
        required: false
        type: string
        default: ""

      # Release parameters (for create-release job)
      is_prerelease:
        description: "Whether this is a prerelease"
        required: false
        type: boolean
        default: false
      release_source_only:
        description: "Whether to create source-only release (no package assets)"
        required: false
        type: boolean
        default: false
      build_command:
        description: "Command to build package for release"
        required: false
        type: string
        default: "npm run build:ci"

      # GPG signing control
      use_gpg:
        description: "If true, use GPG signing for release tags"
        required: false
        type: boolean
        default: false

    secrets:
      NPM_TOKEN:
        description: "NPM token for publishing packages"
        required: false
      BOT_APP_ID:
        description: "GitHub App ID for CLDMV bot"
        required: false
      BOT_APP_PRIVATE_KEY:
        description: "GitHub App private key for CLDMV bot"
        required: false
      TAGGER_NAME:
        description: "GPG tagger name for signing"
        required: false
      TAGGER_EMAIL:
        description: "GPG tagger email for signing"
        required: false
      GPG_PRIVATE_KEY:
        description: "ASCII-armored private key for signing"
        required: false
      GPG_PASSPHRASE:
        description: "Passphrase for the private key (if protected)"
        required: false

    outputs:
      # Repository config outputs
      npm-command:
        description: "Detected NPM publish command"
        value: ${{ jobs.detect-repo-config.outputs.npm-command }}
      github-packages-command:
        description: "Detected GitHub Packages publish command"
        value: ${{ jobs.detect-repo-config.outputs.github-packages-command }}
      repo-is-private:
        description: "Whether the repository is private"
        value: ${{ jobs.detect-repo-config.outputs.repo-is-private }}

      # Publishing outputs
      npm-published:
        description: "Whether the package was published to NPM"
        value: ${{ jobs.publish-npm.outputs.published }}
      github-packages-published:
        description: "Whether the package was published to GitHub Packages"
        value: ${{ jobs.publish-github-packages.outputs.published }}

      # Release outputs
      release-id:
        description: "The ID of the created GitHub release"
        value: ${{ jobs.create-release.outputs.release-id }}

jobs:
  detect-repo-config:
    name: "üîß Detect Repository Config"
    if: inputs.run_detect_repo_config == true
    runs-on: ubuntu-latest
    outputs:
      npm-command: ${{ steps.detect.outputs.npm-command }}
      github-packages-command: ${{ steps.detect.outputs.github-packages-command }}
      repo-is-private: ${{ steps.detect.outputs.repo-is-private }}
    steps:
      - name: Detect Repository Config
        id: detect
        uses: CLDMV/.github/.github/actions/github/jobs/detect-repo-config@v1
        with:
          package-manager: ${{ inputs.package_manager }}
          custom-npm-command: ${{ inputs.publish_command_npm }}
          custom-github-packages-command: ${{ inputs.publish_command_github_packages }}
          github-token: ${{ github.token }}

  publish-npm:
    name: "üì¶ Publish to NPM"
    if: inputs.run_publish_npm == true
    runs-on: ubuntu-latest
    outputs:
      published: ${{ steps.publish.outputs.published }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract and validate version
        id: extract-version
        uses: ./.github/actions/npm/steps/extract-version
        with:
          package-name: ${{ inputs.package_name }}
          version-override: ${{ inputs.version }}

      - name: Calculate artifact names
        id: names
        uses: CLDMV/.github/.github/actions/common/steps/calculate-names@v1
        with:
          node-version: ${{ inputs.node_version }}
          package-name: ${{ inputs.package_name }}
          version: ${{ steps.extract-version.outputs.version }}

      - name: Publish to NPM
        id: publish
        uses: CLDMV/.github/.github/actions/npm/jobs/publish-npm@v1
        with:
          package-name: ${{ inputs.package_name }}
          version: ${{ steps.extract-version.outputs.version }}
          node-version: ${{ inputs.node_version }}
          package-manager: ${{ inputs.package_manager }}
          publish-command: ${{ inputs.publish_command_npm }}
          dry-run: ${{ inputs.dry_run }}
          npm-token: ${{ secrets.NPM_TOKEN }}
          artifact-name: ${{ steps.names.outputs.artifact-name }}

  publish-github-packages:
    name: "üì¶ Publish to GitHub Packages"
    if: inputs.run_publish_github_packages == true
    runs-on: ubuntu-latest
    outputs:
      published: ${{ steps.publish.outputs.published }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract and validate version
        id: extract-version
        uses: ./.github/actions/npm/steps/extract-version
        with:
          package-name: ${{ inputs.package_name }}
          version-override: ${{ inputs.version }}

      - name: Calculate artifact names
        id: names
        uses: CLDMV/.github/.github/actions/common/steps/calculate-names@v1
        with:
          node-version: ${{ inputs.node_version }}
          package-name: ${{ inputs.package_name }}
          version: ${{ steps.extract-version.outputs.version }}

      - name: Publish to GitHub Packages
        id: publish
        uses: CLDMV/.github/.github/actions/npm/jobs/publish-github-packages@v1
        with:
          package-name: ${{ inputs.package_name }}
          version: ${{ steps.extract-version.outputs.version }}
          node-version: ${{ inputs.node_version }}
          package-manager: ${{ inputs.package_manager }}
          publish-command: ${{ inputs.publish_command_github_packages }}
          dry-run: ${{ inputs.dry_run }}
          github-token: ${{ github.token }}
          artifact-name: ${{ steps.names.outputs.artifact-name }}

  download-artifacts:
    name: "‚¨áÔ∏è Download Build Artifacts"
    if: inputs.run_create_release == true && inputs.release_source_only == false
    runs-on: ubuntu-latest
    steps:
      - name: Calculate artifact names
        id: names
        uses: CLDMV/.github/.github/actions/common/steps/calculate-names@v1
        with:
          node-version: ${{ inputs.node_version }}
          package-name: ${{ inputs.package_name }}
          version: ${{ inputs.version }}

      - name: Debug artifact name calculation
        shell: bash
        run: |
          echo "üîç DEBUG: Artifact name calculation"
          echo "  node_version input: '${{ inputs.node_version }}'"
          echo "  Expected artifact name: ${{ steps.names.outputs.artifact-name }}"

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ steps.names.outputs.artifact-name }}
          path: ./artifacts

  create-release:
    name: "üìã Create GitHub Release"
    if: inputs.run_create_release == true && always() && (needs.publish-npm.result == 'success' || needs.publish-github-packages.result == 'success')
    runs-on: ubuntu-latest
    needs: [publish-npm, publish-github-packages, download-artifacts]
    outputs:
      release-id: ${{ steps.create.outputs.release-id }}
    steps:
      - name: Create App token (auto-detect)
        id: app-token
        uses: CLDMV/.github/.github/actions/github/steps/create-app-token@v1
        with:
          app_id: ${{ secrets.BOT_APP_ID }}
          private_key: ${{ secrets.BOT_APP_PRIVATE_KEY }}
        env:
          BOT_APP_ID: ${{ secrets.BOT_APP_ID }}
          BOT_APP_PRIVATE_KEY: ${{ secrets.BOT_APP_PRIVATE_KEY }}

      - name: Create GitHub Release
        id: create
        uses: CLDMV/.github/.github/actions/github/jobs/create-release@v1
        with:
          version: ${{ inputs.version }}
          package-name: ${{ inputs.package_name }}
          is-prerelease: ${{ inputs.is_prerelease }}
          package-manager: ${{ inputs.package_manager }}
          release-source-only: ${{ inputs.release_source_only }}
          node-version: ${{ inputs.node_version }}
          build-command: ${{ inputs.build_command }}
          dry-run: ${{ inputs.dry_run }}
          github-token: ${{ steps.app-token.outputs.token }}
          # GPG signing parameters
          gpg_enabled: ${{ inputs.use_gpg }}
          tagger_name: ${{ secrets.TAGGER_NAME }}
          tagger_email: ${{ secrets.TAGGER_EMAIL }}
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg_passphrase: ${{ secrets.GPG_PASSPHRASE }}
