name: "Get Commit Range"
description: "Get the commit range for analysis based on the latest semantic version tag"

inputs:
  base-ref:
    description: "Override the base tag/ref (optional). If not provided, uses latest semantic version tag."
    required: false
  head-ref:
    description: "The head ref to compare against"
    required: false
    default: "HEAD"
  exclude-version:
    description: "Version to exclude when finding latest tag (e.g., 'v2.0.1' to find previous version)"
    required: false
  debug:
    description: "Enable debug logging"
    required: false
    default: "false"

outputs:
  last-tag:
    description: "The latest semantic version tag found"
    value: ${{ steps.range.outputs.last-tag }}
  commit-range:
    description: "The calculated commit range (e.g., 'v2.0.0..HEAD')"
    value: ${{ steps.range.outputs.commit-range }}
  has-commits:
    description: "Whether there are commits in the range"
    value: ${{ steps.range.outputs.has-commits }}
  base-ref:
    description: "The actual base ref used"
    value: ${{ steps.range.outputs.base-ref }}
  commit-count:
    description: "Number of commits in the range"
    value: ${{ steps.range.outputs.commit-count }}
  commits:
    description: "JSON array of commits with categorization metadata (hash, subject, author, date, category, type, scope, isBreaking)"
    value: ${{ steps.range.outputs.commits }}

runs:
  using: "composite"
  steps:
    - name: Calculate commit range and categorize commits
      id: range
      shell: bash
      run: |
        export HEAD_REF="${{ inputs.head-ref }}"
        export BASE_REF_OVERRIDE="${{ inputs.base-ref }}"
        export EXCLUDE_VERSION="${{ inputs.exclude-version }}"
        export DEBUG="${{ inputs.debug }}"

        # Run the Node.js script
        node "${{ github.action_path }}/action.mjs"
