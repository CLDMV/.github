name: "Check Release Commit"
description: "Check if the latest commit is a release commit and determine version bump type"

inputs:
  exclude-version:
    description: "Version to exclude when finding latest tag (e.g., 'v2.0.1' to find previous version)"
    required: false

outputs:
  should-create-pr:
    description: "Whether a release PR should be created"
    value: ${{ steps.check.outputs.should-create-pr }}
  version-bump:
    description: "Type of version bump (major, minor, patch, explicit)"
    value: ${{ steps.check.outputs.version-bump }}
  commit-message:
    description: "The commit message that triggered the release"
    value: ${{ steps.check.outputs.commit-message }}
  has-breaking:
    description: "Whether this release has breaking changes"
    value: ${{ steps.check.outputs.has-breaking }}
  explicit-version:
    description: "Explicit version when version-bump is explicit"
    value: ${{ steps.check.outputs.explicit-version }}
  commits:
    description: "JSON array of categorized commits"
    value: ${{ steps.commit-range.outputs.commits }}

runs:
  using: "composite"
  steps:
    - name: Get commit range and categorized commits
      id: commit-range
      uses: CLDMV/.github/.github/actions/git/steps/get-commit-range@v1
      with:
        debug: "true"
        exclude-version: ${{ inputs.exclude-version }}

    - name: Check for release commit and analyze version bump
      id: check
      shell: bash
      run: |
        export COMMITS='${{ steps.commit-range.outputs.commits }}'
        export HAS_COMMITS="${{ steps.commit-range.outputs.has-commits }}"

        # Run the Node.js script
        node "${{ github.action_path }}/action.mjs"
