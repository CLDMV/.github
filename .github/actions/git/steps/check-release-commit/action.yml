name: "Check Release Commit"
description: "Check if the latest commit is a release commit and determine version bump type"

outputs:
  should-create-pr:
    description: "Whether a release PR should be created"
    value: ${{ steps.check.outputs.should-create-pr }}
  version-bump:
    description: "Type of version bump (major, minor, patch)"
    value: ${{ steps.check.outputs.version-bump }}
  commit-message:
    description: "The commit message that triggered the release"
    value: ${{ steps.check.outputs.commit-message }}
  has-breaking:
    description: "Whether this release has breaking changes"
    value: ${{ steps.check.outputs.has-breaking }}

runs:
  using: "composite"
  steps:
    - name: Check for release commit
      id: check
      shell: bash
      run: |
        # Get the latest commit message and body
        COMMIT_MSG=$(git log -1 --pretty=format:"%s")
        COMMIT_BODY=$(git log -1 --pretty=format:"%b")

        echo "Latest commit: $COMMIT_MSG"
        echo "commit-message=$COMMIT_MSG" >> $GITHUB_OUTPUT

        # Only trigger on explicit release commits
        if [[ $COMMIT_MSG =~ ^release!: ]]; then
          echo "should-create-pr=true" >> $GITHUB_OUTPUT
          echo "version-bump=major" >> $GITHUB_OUTPUT
          echo "has-breaking=true" >> $GITHUB_OUTPUT
          echo "üöÄ Breaking release commit detected - will create major version PR"
        elif [[ $COMMIT_MSG =~ ^release: ]]; then
          echo "should-create-pr=true" >> $GITHUB_OUTPUT
          echo "has-breaking=false" >> $GITHUB_OUTPUT
          echo "analyze-commits=true" >> $GITHUB_OUTPUT
        else
          echo "should-create-pr=false" >> $GITHUB_OUTPUT
          echo "‚ÑπÔ∏è Not a release commit (must start with 'release:' or 'release!:')"
        fi

    - name: Get commit range for analysis
      id: commit-range
      if: steps.check.outputs.analyze-commits == 'true'
      uses: CLDMV/.github/.github/actions/git/steps/get-commit-range@v1
      with:
        debug: "true"

    - name: Analyze commits for version bump
      id: analyze
      if: steps.check.outputs.analyze-commits == 'true'
      shell: bash
      run: |
        COMMIT_RANGE="${{ steps.commit-range.outputs.commit-range }}"
        LAST_TAG="${{ steps.commit-range.outputs.last-tag }}"
        HAS_COMMITS="${{ steps.commit-range.outputs.has-commits }}"

        if [ "$HAS_COMMITS" = "false" ]; then
          echo "No commits to analyze, defaulting to minor release"
          echo "version-bump=minor" >> $GITHUB_OUTPUT
        else
          echo "Last tag: $LAST_TAG"
          echo "üîç DEBUG: Analyzing commit range: $COMMIT_RANGE"
          
          # Check for breaking changes in the range (exclude release commits)
          echo "üîç Checking for breaking changes..."
          BREAKING_COMMITS=$(git log $COMMIT_RANGE --grep="!" --oneline | grep -v "^[a-f0-9]* release" || true)
          BREAKING_BODY=$(git log $COMMIT_RANGE --grep="BREAKING CHANGE" --oneline | grep -v "^[a-f0-9]* release" || true)
          
          echo "üîç DEBUG: Breaking commits found (after filtering release commits):"
          echo "$BREAKING_COMMITS"
          echo "üîç DEBUG: Breaking change body found (after filtering release commits):"
          echo "$BREAKING_BODY"
          
          if [[ -n "$BREAKING_COMMITS" ]] || [[ -n "$BREAKING_BODY" ]]; then
            echo "version-bump=major" >> $GITHUB_OUTPUT
            echo "has-breaking=true" >> $GITHUB_OUTPUT
            echo "üöÄ Major release - breaking changes detected in commit history"
          else
            # Check for features (exclude release commits)
            FEATURE_COMMITS=$(git log $COMMIT_RANGE --grep="^feat:" --oneline | grep -v "^[a-f0-9]* release" || true)
            if [[ -n "$FEATURE_COMMITS" ]]; then
              echo "version-bump=minor" >> $GITHUB_OUTPUT
              echo "üéâ Minor release - new features detected"
            else
              echo "version-bump=patch" >> $GITHUB_OUTPUT
              echo "üêõ Patch release - only fixes and other changes"
            fi
          fi
        fi

    - name: Final output
      if: steps.check.outputs.should-create-pr == 'true'
      shell: bash
      run: |
        if [[ "${{ steps.check.outputs.analyze-commits }}" == "true" ]]; then
          echo "version-bump=${{ steps.analyze.outputs.version-bump }}" >> $GITHUB_OUTPUT
          echo "has-breaking=${{ steps.analyze.outputs.has-breaking || 'false' }}" >> $GITHUB_OUTPUT
        fi
        echo "üì¶ Release commit detected - will create release PR"
        else
          echo "should-create-pr=false" >> $GITHUB_OUTPUT
          echo "‚ÑπÔ∏è Not a release commit (must start with 'release:' or 'release!:')"
        fi
