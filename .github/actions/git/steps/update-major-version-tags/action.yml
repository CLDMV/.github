name: "Update Major Version Tags"
description: "Update major and minor version tags to point to the latest patch version"

inputs:
  debug:
    description: "Enable debug logging"
    required: false
    default: "false"
  github_token:
    description: "GitHub token for API access (defaults to github.token)"
    required: false
  gpg_enabled:
    description: "Whether GPG signing should be used (auto-detected from workflow)"
    required: false
    default: "false"
  tag-name:
    description: "The semantic version tag to process (e.g., v1.2.3)"
    required: true
  tagger-name:
    description: "Name for tag creation/signing"
    required: false
  tagger-email:
    description: "Email for tag creation/signing"
    required: false
  gpg_private_key:
    description: "ASCII-armored private key for signing"
    required: false
  gpg_passphrase:
    description: "Passphrase for the private key (if protected)"
    required: false

outputs:
  major-version:
    description: "The major version tag that was updated (e.g., v1)"
    value: ${{ steps.update.outputs.major-version }}
  minor-version:
    description: "The minor version tag that was updated (e.g., v1.2)"
    value: ${{ steps.update.outputs.minor-version }}
  updated:
    description: "Whether tags were successfully updated"
    value: ${{ steps.update.outputs.updated }}
  summary-json:
    description: "Complete summary JSON with title, description, and detailed results"
    value: ${{ steps.update.outputs.summary-json }}

runs:
  using: "composite"
  steps:
    - name: Update version tags
      id: update
      shell: bash
      run: |
        TAG_NAME="${{ inputs.tag-name }}"
        echo "Processing tag: $TAG_NAME"

        # Validate that this is a semantic version tag
        if [[ ! $TAG_NAME =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
          echo "Tag $TAG_NAME is not a semantic version tag, skipping"
          echo "updated=false" >> $GITHUB_OUTPUT
          echo 'summary-json={"major_minor_updates":{"title":"📌 Version Tags Updated","description":"No major/minor version tags updated - not a semantic version tag","updated":false,"lines":[],"stats_template":"📌 Major/minor tag updates: {count}"}}' >> $GITHUB_OUTPUT
          exit 0
        fi

        # Extract major and minor versions
        MAJOR_VERSION="v${BASH_REMATCH[1]}"
        MINOR_VERSION="v${BASH_REMATCH[1]}.${BASH_REMATCH[2]}"

        echo "Major version: $MAJOR_VERSION"
        echo "Minor version: $MINOR_VERSION"

        # Get the commit SHA for the tag
        TAG_SHA=$(git rev-list -n 1 "$TAG_NAME")
        echo "Tag SHA: $TAG_SHA"

        # Create JSON payload for upsert-batch action
        JSON_PAYLOAD='[{"tag":"'"$MAJOR_VERSION"'","sha":"'"$TAG_SHA"'","message":"'"$MAJOR_VERSION"' → '"$TAG_NAME"'"},{"tag":"'"$MINOR_VERSION"'","sha":"'"$TAG_SHA"'","message":"'"$MINOR_VERSION"' → '"$TAG_NAME"'"}]'

        echo "🏷️ Updating version tags using upsert-batch:"
        if [ "${{ inputs.debug }}" = "true" ]; then
          echo "$JSON_PAYLOAD"
        else
          echo "- $MAJOR_VERSION -> $TAG_NAME"
          echo "- $MINOR_VERSION -> $TAG_NAME"
        fi

        # Set output for upsert-batch step
        echo "tags-payload=$JSON_PAYLOAD" >> $GITHUB_OUTPUT
        echo "major-version=$MAJOR_VERSION" >> $GITHUB_OUTPUT
        echo "minor-version=$MINOR_VERSION" >> $GITHUB_OUTPUT
        echo "updated=true" >> $GITHUB_OUTPUT

        # Create summary JSON with title, description, and pre-formatted lines
        SUMMARY_JSON='{"major_minor_updates":{"title":"📌 Version Tags Updated","description":"The following major/minor version tags have been updated:","updated":true,"lines":["- **'"$MAJOR_VERSION"'** → **'"$TAG_NAME"'**","- **'"$MINOR_VERSION"'** → **'"$TAG_NAME"'**"],"stats_template":"📌 Major/minor tag updates: {count}","notes":["Workflows can reference major version tags (e.g., `@'"$MAJOR_VERSION"'`) for automatic updates."]}}'
        echo "summary-json=$SUMMARY_JSON" >> $GITHUB_OUTPUT

    - name: Update tags with proper signing
      if: ${{ steps.update.outputs.updated == 'true' }}
      uses: CLDMV/.github/.github/actions/github/api/tag/upsert-batch@v1
      env:
        GITHUB_TOKEN: ${{ inputs.github_token || github.token }}
      with:
        debug: ${{ inputs.debug }}
        payload: ${{ steps.update.outputs.tags-payload }}
        gpg_enabled: ${{ inputs.gpg_enabled }}
        tagger_name: ${{ inputs.tagger-name }}
        tagger_email: ${{ inputs.tagger-email }}
        gpg_private_key: ${{ inputs.gpg_private_key }}
        gpg_passphrase: ${{ inputs.gpg_passphrase }}
