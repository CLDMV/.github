name: "🔧 Fix Orphaned Major Version Tags"
description: "Detects and fixes major version tags that don't point to the latest patch version"

outputs:
  fixed-tags:
    description: "List of major version tags that were fixed"
    value: ${{ steps.fix-orphans.outputs.fixed-tags }}
  orphans-found:
    description: "Whether any orphaned tags were found and fixed"
    value: ${{ steps.fix-orphans.outputs.orphans-found }}

runs:
  using: composite
  steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Detect and fix orphaned major version tags
      id: fix-orphans
      shell: bash
      run: |
        echo "🔍 Checking for orphaned major and minor version tags..."

        FIXED_TAGS=""
        ORPHANS_FOUND="false"
        ORPHANED_TAGS_FILE=$(mktemp)

        # Get all version tags and sort them
        ALL_TAGS=$(git tag -l "v*.*.*" | sort -V)

        # Determine current version from latest tag (to skip in orphan detection)
        CURRENT_TAG=$(echo "$ALL_TAGS" | tail -1)
        CURRENT_MAJOR="v$(echo "$CURRENT_TAG" | sed 's/v\([0-9]*\)\..*/\1/')"
        CURRENT_MINOR="v$(echo "$CURRENT_TAG" | sed 's/v\([0-9]*\.[0-9]*\)\..*/\1/')"

        echo "🏷️ Current tag: $CURRENT_TAG (major: $CURRENT_MAJOR, minor: $CURRENT_MINOR)"

        # Get all existing major version tags (v1, v2, etc.)
        EXISTING_MAJOR_TAGS=$(git tag -l | grep -E "^v[0-9]+$" | sort -V)

        # Get all existing minor version tags (v1.0, v1.1, etc.) 
        EXISTING_MINOR_TAGS=$(git tag -l | grep -E "^v[0-9]+\.[0-9]+$" | sort -V)

        # Check existing major version tags for orphans (skip current major version)
        for MAJOR_TAG in $EXISTING_MAJOR_TAGS; do
          # Skip the current major version - let regular update handle it
          if [ "$MAJOR_TAG" = "v$CURRENT_MAJOR" ]; then
            echo "⏭️ Skipping $MAJOR_TAG (current major version - handled by regular update)"
            continue
          fi
          
          echo "🔍 Checking existing major tag: $MAJOR_TAG"
          
          # Get the latest patch version for this major version
          MAJOR_NUM=$(echo "$MAJOR_TAG" | sed 's/v//')
          LATEST_PATCH=$(echo "$ALL_TAGS" | grep "^v${MAJOR_NUM}\." | sort -V | tail -1)
          
          if [ -n "$LATEST_PATCH" ]; then
            # Get current commit that major tag points to
            MAJOR_COMMIT=$(git rev-list -n 1 "$MAJOR_TAG" 2>/dev/null || echo "")
            LATEST_COMMIT=$(git rev-list -n 1 "$LATEST_PATCH")
            
            echo "  📍 $MAJOR_TAG points to: $MAJOR_COMMIT"
            echo "  📍 $LATEST_PATCH points to: $LATEST_COMMIT"
            
            if [ "$MAJOR_COMMIT" != "$LATEST_COMMIT" ] && [ -n "$MAJOR_COMMIT" ]; then
              echo "🚨 Orphaned major tag detected: $MAJOR_TAG should point to $LATEST_PATCH"
              echo "$MAJOR_TAG|$LATEST_COMMIT|$LATEST_PATCH" >> "$ORPHANED_TAGS_FILE"
              if [ -z "$FIXED_TAGS" ]; then
                FIXED_TAGS="${MAJOR_TAG} → ${LATEST_PATCH}"
              else
                FIXED_TAGS="${FIXED_TAGS}\n${MAJOR_TAG} → ${LATEST_PATCH}"
              fi
              ORPHANS_FOUND="true"
            else
              echo "✅ $MAJOR_TAG correctly points to $LATEST_PATCH"
            fi
          fi
        done

        # Check existing minor version tags for orphans (skip current minor version)
        for MINOR_TAG in $EXISTING_MINOR_TAGS; do
          # Skip the current minor version - let regular update handle it
          if [ "$MINOR_TAG" = "v$CURRENT_MINOR" ]; then
            echo "⏭️ Skipping $MINOR_TAG (current minor version - handled by regular update)"
            continue
          fi
          
          echo "🔍 Checking existing minor tag: $MINOR_TAG"
          
          # Get the latest patch version for this minor version
          MINOR_PATTERN=$(echo "$MINOR_TAG" | sed 's/v//')
          LATEST_PATCH=$(echo "$ALL_TAGS" | grep "^v${MINOR_PATTERN}\." | sort -V | tail -1)
          
          if [ -n "$LATEST_PATCH" ]; then
            # Get current commit that minor tag points to
            MINOR_COMMIT=$(git rev-list -n 1 "$MINOR_TAG" 2>/dev/null || echo "")
            LATEST_COMMIT=$(git rev-list -n 1 "$LATEST_PATCH")
            
            echo "  📍 $MINOR_TAG points to: $MINOR_COMMIT"
            echo "  📍 $LATEST_PATCH points to: $LATEST_COMMIT"
            
            if [ "$MINOR_COMMIT" != "$LATEST_COMMIT" ] && [ -n "$MINOR_COMMIT" ]; then
              echo "🚨 Orphaned minor tag detected: $MINOR_TAG should point to $LATEST_PATCH"
              echo "$MINOR_TAG|$LATEST_COMMIT|$LATEST_PATCH" >> "$ORPHANED_TAGS_FILE"
              if [ -z "$FIXED_TAGS" ]; then
                FIXED_TAGS="${MINOR_TAG} → ${LATEST_PATCH}"
              else
                FIXED_TAGS="${FIXED_TAGS}\n${MINOR_TAG} → ${LATEST_PATCH}"
              fi
              ORPHANS_FOUND="true"
            else
              echo "✅ $MINOR_TAG correctly points to $LATEST_PATCH"
            fi
          fi
        done

        # Set outputs
        echo "fixed-tags=${FIXED_TAGS}" >> $GITHUB_OUTPUT
        echo "orphans-found=${ORPHANS_FOUND}" >> $GITHUB_OUTPUT

        if [ "$ORPHANS_FOUND" = "true" ]; then
          echo "🔧 Found orphaned tags, building JSON array..."
          
          # Build JSON array using printf method (same as ci-jobs.yml)
          TAGS_ARRAY=()
          while IFS='|' read -r tag_name target_sha latest_patch; do
            TAGS_ARRAY+=("{\"tag\":\"${tag_name}\",\"sha\":\"${target_sha}\"}")
          done < "$ORPHANED_TAGS_FILE"
          
          # Join with commas and create JSON array
          printf -v joined '%s,' "${TAGS_ARRAY[@]}"
          JSON_ARRAY="[${joined%,}]"
          
          echo "orphaned-tags-json=$JSON_ARRAY" >> $GITHUB_OUTPUT
          echo "🔧 Orphaned tags JSON: $JSON_ARRAY"
        else
          echo "✅ No orphaned major/minor version tags found"
        fi

    - name: Fix orphaned tags using modular GitHub API action
      if: steps.fix-orphans.outputs.orphans-found == 'true'
      uses: CLDMV/.github/.github/actions/github/api/update-tag@v1
      with:
        tag_data: ${{ steps.fix-orphans.outputs.orphaned-tags-json }}
        github_token: ${{ github.token }}
