name: "Create GitHub Release"
description: "Composite action for creating GitHub releases"

inputs:
  version:
    description: "Version number for the release (auto-detected from package.json if not provided)"
    required: false
    default: ""
  package-name:
    description: "Name of the package being released"
    required: true
  is-prerelease:
    description: "Whether this is a prerelease"
    required: false
    default: "false"
  package-manager:
    description: "Package manager (npm or yarn)"
    required: false
    default: "npm"
  github-token:
    description: "GitHub token for API operations"
    required: true
  release-notes:
    description: "Release notes content in markdown (optional, will be auto-generated if not provided)"
    required: false
    default: ""
  assets:
    description: "Comma-separated list of file paths to upload as release assets"
    required: false
    default: ""
  release-source-only:
    description: "Whether to create source-only release (no package assets)"
    required: false
    default: "false"
  node-version:
    description: "Node.js version used for build (affects artifact name)"
    required: false
    default: "lts/*"
  build-command:
    description: "Command to build package (used if no artifacts available)"
    required: false
    default: "npm run build:ci"
  dry-run:
    description: "Dry run mode - validate everything but don't create release"
    required: false
    default: "false"

  # GPG signing parameters
  gpg_enabled:
    description: "Whether GPG signing should be used (auto-detected)"
    required: false
    default: "false"
  tagger_name:
    description: "Tagger name for GPG signing"
    required: false
  tagger_email:
    description: "Tagger email for GPG signing"
    required: false
  gpg_private_key:
    description: "ASCII-armored private key for signing"
    required: false
  gpg_passphrase:
    description: "Passphrase for the private key (if protected)"
    required: false

outputs:
  release-id:
    description: "ID of the created GitHub release"
    value: ${{ (inputs.dry-run == 'true' && steps.create-release-dry.outputs.release-id) || steps.create-release.outputs.release_id }}
  commit-sha:
    description: "Commit SHA used for the release tag"
    value: ${{ steps.get-sha.outputs.commit-sha }}
  tag-sha:
    description: "SHA of the created tag"
    value: ${{ (inputs.dry-run == 'true' && steps.create-tag-dry.outputs.tag-sha) || steps.create-tag.outputs.tag-sha }}
  tag-verified:
    description: "Whether the tag is GPG verified"
    value: ${{ (inputs.dry-run == 'true' && steps.verify-tag-dry.outputs.verified) || steps.verify-tag.outputs.verified }}
  tag-verification-reason:
    description: "Reason for tag verification result"
    value: ${{ (inputs.dry-run == 'true' && steps.verify-tag-dry.outputs.reason) || steps.verify-tag.outputs.reason }}

runs:
  using: composite
  steps:
    - name: Update Summary - Release Start
      shell: bash
      run: |
        if [ "${{ inputs.dry-run }}" = "true" ]; then
          echo "## üß™ Dry Run - GitHub Release Validation" >> $GITHUB_STEP_SUMMARY
          echo "- üîç Validating GitHub release creation for ${{ inputs.package-name }} (NO RELEASE WILL BE CREATED)" >> $GITHUB_STEP_SUMMARY
        else
          echo "## üöÄ GitHub Release Progress" >> $GITHUB_STEP_SUMMARY
          echo "- üîÑ Starting release creation for ${{ inputs.package-name }}" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY

    - name: Checkout code
      uses: CLDMV/.github/.github/actions/common/steps/checkout-code@v1
      with:
        fetch-depth: 0

    - name: Auto-detect version if not provided
      id: detect-version
      shell: bash
      run: |
        if [ -z "${{ inputs.version }}" ]; then
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üîç Auto-detected version from package.json: $VERSION"
        else
          echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
          echo "üìã Using provided version: ${{ inputs.version }}"
        fi

    - name: Get commits for changelog
      id: get-commits
      uses: CLDMV/.github/.github/actions/git/steps/check-release-commit@v1

    - name: Generate comprehensive changelog for release notes
      id: release-notes
      uses: CLDMV/.github/.github/actions/git/steps/generate-comprehensive-changelog@v1
      with:
        commits: ${{ steps.get-commits.outputs.commits }}
        use-single-commit-message: "true"

    - name: Get current commit SHA
      id: get-sha
      shell: bash
      run: |
        echo "commit-sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

    - name: Calculate artifact and release names
      id: names
      uses: CLDMV/.github/.github/actions/common/steps/calculate-names@v1
      with:
        node-version: ${{ inputs.node-version }}
        package-name: ${{ inputs.package-name }}
        version: ${{ steps.detect-version.outputs.version }}

    - name: Create tag if needed
      if: inputs.dry-run != 'true'
      id: create-tag
      uses: CLDMV/.github/.github/actions/github/api/tag/create@v1
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      with:
        tag: v${{ steps.detect-version.outputs.version }}
        sha: ${{ steps.get-sha.outputs.commit-sha }}
        message: ${{ inputs.release-notes || steps.release-notes.outputs.changelog-content }}
        gpg_enabled: ${{ inputs.gpg_enabled }}
        tagger_name: ${{ inputs.tagger_name }}
        tagger_email: ${{ inputs.tagger_email }}
        gpg_private_key: ${{ inputs.gpg_private_key }}
        gpg_passphrase: ${{ inputs.gpg_passphrase }}

    - name: Dry Run - Tag Creation Validation
      if: inputs.dry-run == 'true'
      id: create-tag-dry
      shell: bash
      run: |
        echo "üß™ **DRY RUN**: Tag creation validation" >> $GITHUB_STEP_SUMMARY
        echo "  - ‚úÖ Tag name: v${{ steps.detect-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "  - ‚úÖ Commit SHA: ${{ steps.get-sha.outputs.commit-sha }}" >> $GITHUB_STEP_SUMMARY
        echo "  - ‚úÖ GPG configuration: ${{ inputs.gpg_enabled == 'true' && 'Enabled' || 'Disabled' }}" >> $GITHUB_STEP_SUMMARY
        # Set outputs for dry run
        echo "tag-sha=DRY-RUN-TAG-SHA" >> $GITHUB_OUTPUT

    - name: Update Summary - Tag Created
      if: inputs.dry-run != 'true'
      shell: bash
      run: |
        echo "- ‚úÖ Git tag v${{ steps.detect-version.outputs.version }} created" >> $GITHUB_STEP_SUMMARY

    - name: Setup Node.js (if no artifacts available)
      if: inputs.release-source-only == 'false'
      uses: CLDMV/.github/.github/actions/common/steps/setup-node@v1
      with:
        node-version: ${{ inputs.node-version }}

    - name: Install dependencies (if no artifacts available)
      if: inputs.release-source-only == 'false'
      uses: CLDMV/.github/.github/actions/npm/steps/install-dependencies@v1
      with:
        package-manager: ${{ inputs.package-manager }}

    - name: Build package (if no artifacts available)
      if: inputs.release-source-only == 'false'
      uses: CLDMV/.github/.github/actions/common/steps/build-project@v1
      with:
        build-command: ${{ inputs.build-command || 'npm run build:ci' }}
        environment: production

    - name: Create npm package (if no artifacts available)
      if: inputs.release-source-only == 'false'
      id: create-package
      uses: CLDMV/.github/.github/actions/npm/steps/create-package@v1
      with:
        package-manager: ${{ inputs.package-manager }}
        package-name: ${{ inputs.package-name }}

    - name: Create package files for release
      if: inputs.release-source-only == 'false'
      id: package-files
      uses: CLDMV/.github/.github/actions/npm/steps/create-package-files@v1
      with:
        package-path: ${{ steps.create-package.outputs.package-path }}

    - name: Create GitHub release
      if: inputs.dry-run != 'true'
      id: create-release
      uses: CLDMV/.github/.github/actions/github/api/release/create@v1
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      with:
        tag_name: v${{ steps.detect-version.outputs.version }}
        name: ${{ steps.names.outputs.release-name }}
        body: ${{ inputs.release-notes || steps.release-notes.outputs.changelog-content }}
        is_prerelease: ${{ inputs.is-prerelease }}
        is_draft: false
        assets: ${{ inputs.release-source-only == 'false' && format('{0},{1}', steps.package-files.outputs.tar-gz-path, steps.package-files.outputs.zip-path) || inputs.assets }}

    - name: Dry Run - GitHub Release Validation
      if: inputs.dry-run == 'true'
      id: create-release-dry
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      run: |
        echo "üß™ DRY RUN MODE: Validating GitHub release creation"
        echo ""
        echo "‚úÖ Validation Results:"
        echo "  - Tag name: v${{ steps.detect-version.outputs.version }}"
        echo "  - Release name: ${{ steps.names.outputs.release-name }}"
        echo "  - Prerelease: ${{ inputs.is-prerelease }}"
        echo "  - GitHub token: Available and authenticated"
        echo "  - Repository: ${{ github.repository }}"
        echo ""

        # Test GitHub API access
        if curl -s -H "Authorization: token $GITHUB_TOKEN" \
               -H "Accept: application/vnd.github.v3+json" \
               "https://api.github.com/repos/${{ github.repository }}" > /dev/null; then
          echo "  - GitHub API access: ‚úÖ Verified"
        else
          echo "  - GitHub API access: ‚ùå Failed"
          exit 1
        fi

        # Check if tag already exists
        if git tag -l "v${{ steps.detect-version.outputs.version }}" | grep -q "v${{ steps.detect-version.outputs.version }}"; then
          echo "  - Tag v${{ steps.detect-version.outputs.version }}: ‚ö†Ô∏è Already exists (will be updated)"
        else
          echo "  - Tag v${{ steps.detect-version.outputs.version }}: ‚úÖ Will be created"
        fi

        # Check if release already exists
        RELEASE_EXISTS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                              -H "Accept: application/vnd.github.v3+json" \
                              "https://api.github.com/repos/${{ github.repository }}/releases/tags/v${{ steps.detect-version.outputs.version }}" \
                              | jq -r '.id // "null"')

        if [ "$RELEASE_EXISTS" != "null" ]; then
          echo "  - Release v${{ steps.detect-version.outputs.version }}: ‚ö†Ô∏è Already exists (will be updated)"
        else
          echo "  - Release v${{ steps.detect-version.outputs.version }}: ‚úÖ Will be created"
        fi

        if [ "${{ inputs.release-source-only }}" != "true" ]; then
          echo "  - Package assets: ‚úÖ Will be attached (.tar.gz and .zip)"
        else
          echo "  - Package assets: ‚è≠Ô∏è Source-only release (no assets)"
        fi

        echo ""
        echo "üí° In real run, would create release at:"
        echo "   ${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{ steps.detect-version.outputs.version }}"

        # Set outputs for dry run (simulate successful creation)
        echo "release-id=DRY-RUN" >> $GITHUB_OUTPUT
        echo "release-url=${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{ steps.detect-version.outputs.version }}" >> $GITHUB_OUTPUT

    - name: Update Summary - Release Created
      if: steps.create-release.outputs.release-id != '' && inputs.dry-run != 'true'
      shell: bash
      run: |
        echo "- ‚úÖ GitHub Release [v${{ steps.detect-version.outputs.version }}](${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{ steps.detect-version.outputs.version }}) created successfully" >> $GITHUB_STEP_SUMMARY
        if [ "${{ inputs.release-source-only }}" != "true" ]; then
          echo "- ‚úÖ Package assets (.tar.gz and .zip) attached to release" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Update Summary - Dry Run Complete
      if: inputs.dry-run == 'true'
      shell: bash
      run: |
        echo "- üß™ **DRY RUN**: GitHub Release validation successful" >> $GITHUB_STEP_SUMMARY
        echo "  - ‚úÖ Tag and release naming validated" >> $GITHUB_STEP_SUMMARY
        echo "  - ‚úÖ GitHub API access confirmed" >> $GITHUB_STEP_SUMMARY
        echo "  - ‚úÖ Release notes generated successfully" >> $GITHUB_STEP_SUMMARY
        echo "  - ‚úÖ All prerequisites met for release creation" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üí° **Would create**: [v${{ steps.detect-version.outputs.version }}](${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{ steps.detect-version.outputs.version }})" >> $GITHUB_STEP_SUMMARY

    - name: Verify tag signature
      if: inputs.dry-run != 'true'
      id: verify-tag
      uses: CLDMV/.github/.github/actions/github/api/tag/verify@v1
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      with:
        tag: v${{ steps.detect-version.outputs.version }}

    - name: Dry Run - Tag Signature Validation
      if: inputs.dry-run == 'true'
      id: verify-tag-dry
      shell: bash
      run: |
        echo "üß™ **DRY RUN**: Tag signature validation skipped" >> $GITHUB_STEP_SUMMARY
        echo "  - ‚úÖ GPG configuration would be verified in real run" >> $GITHUB_STEP_SUMMARY
        # Set outputs for dry run
        echo "verified=true" >> $GITHUB_OUTPUT
        echo "reason=dry-run-validation" >> $GITHUB_OUTPUT

    - name: Update Summary - Final
      shell: bash
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üéâ **GitHub Release Complete** - [Release v${{ steps.detect-version.outputs.version }} is now available ‚Üí](${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{ steps.detect-version.outputs.version }})" >> $GITHUB_STEP_SUMMARY
