name: "Create GitHub Release"
description: "Composite action for creating GitHub releases"

inputs:
  version:
    description: "Version number for the release (auto-detected from package.json if not provided)"
    required: false
    default: ""
  package-name:
    description: "Name of the package being released"
    required: true
  is-prerelease:
    description: "Whether this is a prerelease"
    required: false
    default: "false"
  package-manager:
    description: "Package manager (npm or yarn)"
    required: false
    default: "npm"
  github-token:
    description: "GitHub token for API operations"
    required: true
  release-notes:
    description: "Release notes content in markdown (optional, will be auto-generated if not provided)"
    required: false
    default: ""
  assets:
    description: "Comma-separated list of file paths to upload as release assets"
    required: false
    default: ""
  release-source-only:
    description: "Whether to create source-only release (no package assets)"
    required: false
    default: "false"
  node-version:
    description: "Node.js version used for build (affects artifact name)"
    required: false
    default: "lts/*"
  build-command:
    description: "Command to build package (used if no artifacts available)"
    required: false
    default: "npm run build:ci"

outputs:
  release-id:
    description: "ID of the created GitHub release"
    value: ${{ steps.create-release.outputs.release_id }}
  commit-sha:
    description: "Commit SHA used for the release tag"
    value: ${{ steps.get-sha.outputs.commit-sha }}
  tag-sha:
    description: "SHA of the created tag"
    value: ${{ steps.create-tag.outputs.tag-sha }}
  tag-verified:
    description: "Whether the tag is GPG verified"
    value: ${{ steps.verify-tag.outputs.verified }}
  tag-verification-reason:
    description: "Reason for tag verification result"
    value: ${{ steps.verify-tag.outputs.reason }}

runs:
  using: composite
  steps:
    - name: Checkout code
      uses: CLDMV/.github/.github/actions/common/steps/checkout-code@v1
      with:
        fetch-depth: 0

    - name: Auto-detect version if not provided
      id: detect-version
      shell: bash
      run: |
        if [ -z "${{ inputs.version }}" ]; then
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "🔍 Auto-detected version from package.json: $VERSION"
        else
          echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
          echo "📋 Using provided version: ${{ inputs.version }}"
        fi

    - name: Generate release notes
      id: release-notes
      uses: CLDMV/.github/.github/actions/git/steps/generate-release-notes@v1
      with:
        version: ${{ steps.detect-version.outputs.version }}
        package-name: ${{ inputs.package-name }}
        package-manager: ${{ inputs.package-manager }}

    - name: Get current commit SHA
      id: get-sha
      shell: bash
      run: |
        echo "commit-sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

    - name: Calculate artifact and release names
      id: names
      uses: CLDMV/.github/.github/actions/common/steps/calculate-names@v1
      with:
        node-version: ${{ inputs.node-version }}
        package-name: ${{ inputs.package-name }}
        version: ${{ steps.detect-version.outputs.version }}

    - name: Create tag if needed
      id: create-tag
      uses: CLDMV/.github/.github/actions/github/api/tags/create@v1
      with:
        tag: v${{ steps.detect-version.outputs.version }}
        message: Release v${{ steps.detect-version.outputs.version }}
        commit-sha: ${{ steps.get-sha.outputs.commit-sha }}
        github-token: ${{ inputs.github-token }}
        force: false

    - name: Download build artifacts (for package assets)
      if: inputs.release-source-only == 'false'
      id: download-artifacts
      uses: actions/download-artifact@v4
      continue-on-error: true
      with:
        name: ${{ steps.names.outputs.artifact-name }}
        path: ./artifacts

    - name: Setup Node.js (if no artifacts available)
      if: inputs.release-source-only == 'false' && steps.download-artifacts.outcome == 'failure'
      uses: CLDMV/.github/.github/actions/common/steps/setup-node@v1
      with:
        node-version: ${{ inputs.node-version }}

    - name: Install dependencies (if no artifacts available)
      if: inputs.release-source-only == 'false' && steps.download-artifacts.outcome == 'failure'
      uses: CLDMV/.github/.github/actions/npm/steps/install-dependencies@v1
      with:
        package-manager: ${{ inputs.package-manager }}

    - name: Build package (if no artifacts available)
      if: inputs.release-source-only == 'false' && steps.download-artifacts.outcome == 'failure'
      uses: CLDMV/.github/.github/actions/common/steps/build-project@v1
      with:
        build-command: ${{ inputs.build-command || 'npm run build:ci' }}
        environment: production

    - name: Create npm package (if no artifacts available)
      if: inputs.release-source-only == 'false' && steps.download-artifacts.outcome == 'failure'
      id: create-package
      uses: CLDMV/.github/.github/actions/npm/steps/create-package@v1
      with:
        package-manager: ${{ inputs.package-manager }}
        package-name: ${{ inputs.package-name }}

    - name: Create package files for release
      if: inputs.release-source-only == 'false'
      id: package-files
      uses: CLDMV/.github/.github/actions/npm/steps/create-package-files@v1
      with:
        package-path: ${{ steps.download-artifacts.outcome == 'success' && './artifacts/*.tgz' || '*.tgz' }}

    - name: Create GitHub release
      id: create-release
      uses: CLDMV/.github/.github/actions/github/api/release/create@v1
      with:
        tag_name: v${{ steps.detect-version.outputs.version }}
        name: ${{ steps.names.outputs.release-name }}
        body: ${{ inputs.release-notes || steps.release-notes.outputs.release-notes }}
        is_prerelease: ${{ inputs.is-prerelease }}
        is_draft: false
        github_token: ${{ inputs.github-token }}
        assets: ${{ inputs.release-source-only == 'false' && format('{0},{1}', steps.package-files.outputs.tgz-path, steps.package-files.outputs.zip-path) || inputs.assets }}

    - name: Verify tag signature
      id: verify-tag
      uses: CLDMV/.github/.github/actions/github/api/tags/verify@v1
      with:
        tag-sha: ${{ steps.create-tag.outputs.tag-sha }}
        github-token: ${{ inputs.github-token }}
