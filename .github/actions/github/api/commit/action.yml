name: "Create Signed Commit"
description: "Create a signed commit via GitHub API with version bump and build artifacts"

inputs:
  commit-message:
    description: "Commit message"
    required: true
  github-token:
    description: "GitHub token for API access"
    required: true

outputs:
  commit-sha:
    description: "SHA of the created commit"
    value: ${{ steps.commit.outputs.commit-sha }}
  verified:
    description: "Whether the commit was verified"
    value: ${{ steps.commit.outputs.verified }}

runs:
  using: "composite"
  steps:
    - name: Create signed commit via GitHub API
      id: commit
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      run: |
        # Check if there are changes to commit
        git add .
        if git diff --staged --quiet; then
          echo "No changes to commit"
          exit 0
        fi

        # Get current branch and commit info
        CURRENT_BRANCH="${{ github.ref_name }}"
        BASE_SHA=$(git rev-parse HEAD)

        # Create tree with all changes using GitHub API
        echo "📦 Creating tree with version bump and build artifacts..."

        # Refresh the local git index
        git update-index --refresh || true

        # Create tree SHA locally and verify it exists
        TREE_SHA=$(git write-tree)
        echo "Local tree SHA: $TREE_SHA"

        # Verify the tree exists locally
        if ! git cat-file -e "$TREE_SHA"; then
          echo "❌ Tree SHA $TREE_SHA does not exist locally"
          exit 1
        fi

        # Create all blob objects via GitHub API first
        echo "📄 Creating blob objects via GitHub API..."

        # Get all staged files and create blobs
        git diff --cached --name-only | while read file; do
          if [ -f "$file" ]; then
            echo "Creating blob for: $file"
            
            # Read file content as base64
            CONTENT=$(base64 -w 0 "$file")
            
            # Create blob via API using printf to avoid argument length issues
            printf '{"content":"%s","encoding":"base64"}' "$CONTENT" | \
            curl -s -X POST \
              -H "Authorization: token ${{ inputs.github-token }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Content-Type: application/json" \
              --data-binary @- \
              "https://api.github.com/repos/${{ github.repository }}/git/blobs" > /dev/null
          fi
        done

        echo "✅ All blob objects created"

        # Now create the tree via API
        echo "🌳 Creating tree via GitHub API..."

        # Build tree JSON array properly
        TREE_ITEMS_JSON=$(git diff --cached --name-only | while read file; do
          if [ -f "$file" ]; then
            BLOB_SHA=$(git hash-object "$file")
            jq -n --arg path "$file" --arg sha "$BLOB_SHA" '{
              path: $path,
              mode: "100644",
              type: "blob",
              sha: $sha
            }'
          fi
        done | jq -s .)

        # Create the full tree JSON
        BASE_TREE=$(git rev-parse HEAD^{tree})
        TREE_JSON=$(jq -n --arg base_tree "$BASE_TREE" --argjson tree "$TREE_ITEMS_JSON" '{
          base_tree: $base_tree,
          tree: $tree
        }')

        echo "Tree JSON: $TREE_JSON"

        echo "$TREE_JSON" | \
        curl -s -X POST \
          -H "Authorization: token ${{ inputs.github-token }}" \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Content-Type: application/json" \
          --data-binary @- \
          "https://api.github.com/repos/${{ github.repository }}/git/trees" > /tmp/tree_response.json

        API_TREE_SHA=$(cat /tmp/tree_response.json | jq -r '.sha')

        if [ "$API_TREE_SHA" != "null" ] && [ -n "$API_TREE_SHA" ]; then
          echo "✅ Created tree via API: $API_TREE_SHA"
          FINAL_TREE_SHA="$API_TREE_SHA"
        else
          echo "⚠️ Failed to create tree via API, using local tree"
          echo "Response: $(cat /tmp/tree_response.json)"
          FINAL_TREE_SHA="$TREE_SHA"
        fi

        # Create commit using GitHub API (automatically signed)
        echo "✍️ Creating signed commit via GitHub API..."
        COMMIT_RESPONSE=$(curl -s -X POST \
          -H "Authorization: token ${{ inputs.github-token }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/git/commits" \
          -d "{
            \"message\": \"${{ inputs.commit-message }}\",
            \"tree\": \"$FINAL_TREE_SHA\",
            \"parents\": [\"$BASE_SHA\"]
          }")

        # Extract new commit SHA and verification status
        NEW_COMMIT_SHA=$(echo "$COMMIT_RESPONSE" | jq -r '.sha')
        VERIFIED=$(echo "$COMMIT_RESPONSE" | jq -r '.verification.verified')
        VERIFICATION_REASON=$(echo "$COMMIT_RESPONSE" | jq -r '.verification.reason')

        if [ "$NEW_COMMIT_SHA" = "null" ] || [ -z "$NEW_COMMIT_SHA" ]; then
          echo "❌ Failed to create commit via API"
          echo "Response: $COMMIT_RESPONSE"
          echo "This likely means some git objects don't exist remotely."
          echo "Tree SHA: $FINAL_TREE_SHA"
          exit 1
        fi

        echo "✅ Created signed commit: $NEW_COMMIT_SHA"
        echo "🔐 Verified: $VERIFIED (reason: $VERIFICATION_REASON)"

        # Update branch reference to new signed commit
        echo "📌 Updating branch reference..."
        UPDATE_RESPONSE=$(curl -s -X PATCH \
          -H "Authorization: token ${{ inputs.github-token }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/git/refs/heads/$CURRENT_BRANCH" \
          -d "{
            \"sha\": \"$NEW_COMMIT_SHA\"
          }")

        echo "✅ Updated branch $CURRENT_BRANCH to signed commit"
        echo "Update response: $UPDATE_RESPONSE"

        # Set outputs
        echo "commit-sha=$NEW_COMMIT_SHA" >> $GITHUB_OUTPUT
        echo "verified=$VERIFIED" >> $GITHUB_OUTPUT
