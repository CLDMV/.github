name: "Create Signed Commit"
description: "Create a signed commit via GitHub API with version bump and build artifacts"

inputs:
  commit-message:
    description: "Commit message"
    required: true
  github-token:
    description: "GitHub token for API access"
    required: true

outputs:
  commit-sha:
    description: "SHA of the created commit"
    value: ${{ steps.commit.outputs.commit-sha }}
  verified:
    description: "Whether the commit was verified"
    value: ${{ steps.commit.outputs.verified }}

runs:
  using: "composite"
  steps:
    - name: Create signed commit via GitHub API
      id: commit
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      run: |
        # Check if there are changes to commit
        git add .
        if git diff --staged --quiet; then
          echo "No changes to commit"
          exit 0
        fi

        # Get current branch and commit info
        CURRENT_BRANCH="${{ github.ref_name }}"
        BASE_SHA=$(git rev-parse HEAD)

        # Create tree with all changes using GitHub API
        echo "📦 Creating tree with version bump and build artifacts..."

        # First, ensure all objects are pushed to GitHub
        git update-index --refresh || true

        # Create tree SHA locally and verify it exists
        TREE_SHA=$(git write-tree)
        echo "Local tree SHA: $TREE_SHA"

        # Verify the tree exists locally
        if ! git cat-file -e "$TREE_SHA"; then
          echo "❌ Tree SHA $TREE_SHA does not exist locally"
          exit 1
        fi

        # First, push all staged objects to remote
        echo "� Pushing staged objects to remote..."
        git update-index --refresh || true
        
        # Create a temporary commit to push objects
        TEMP_COMMIT=$(git commit-tree "$TREE_SHA" -p HEAD -m "temp commit for object transfer")
        git push origin "$TEMP_COMMIT:refs/temp/objects" || true
        
        # Clean up the temp ref
        git push origin --delete refs/temp/objects || true

        # Now use the tree SHA directly since objects should exist remotely
        echo "🌳 Using tree SHA: $TREE_SHA"
        FINAL_TREE_SHA="$TREE_SHA"

        # Create commit using GitHub API (automatically signed)
        echo "✍️ Creating signed commit via GitHub API..."
        COMMIT_RESPONSE=$(curl -s -X POST \
          -H "Authorization: token ${{ inputs.github-token }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/git/commits" \
          -d "{
            \"message\": \"${{ inputs.commit-message }}\",
            \"tree\": \"$FINAL_TREE_SHA\",
            \"parents\": [\"$BASE_SHA\"]
          }")

        # Extract new commit SHA and verification status
        NEW_COMMIT_SHA=$(echo "$COMMIT_RESPONSE" | jq -r '.sha')
        VERIFIED=$(echo "$COMMIT_RESPONSE" | jq -r '.verification.verified')
        VERIFICATION_REASON=$(echo "$COMMIT_RESPONSE" | jq -r '.verification.reason')

        if [ "$NEW_COMMIT_SHA" = "null" ] || [ -z "$NEW_COMMIT_SHA" ]; then
          echo "❌ Failed to create commit via API"
          echo "Response: $COMMIT_RESPONSE"
          exit 1
        fi

        echo "✅ Created commit: $NEW_COMMIT_SHA"
        echo "🔐 Verified: $VERIFIED (reason: $VERIFICATION_REASON)"
        echo "commit-sha=$NEW_COMMIT_SHA" >> $GITHUB_OUTPUT
        echo "verified=$VERIFIED" >> $GITHUB_OUTPUT

        # Update branch reference to new signed commit
        echo "📌 Updating branch reference..."
        UPDATE_RESPONSE=$(curl -s -X PATCH \
          -H "Authorization: token ${{ inputs.github-token }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/git/refs/heads/$CURRENT_BRANCH" \
          -d "{
            \"sha\": \"$NEW_COMMIT_SHA\"
          }")

        echo "✅ Updated branch $CURRENT_BRANCH to signed commit"
        echo "Update response: $UPDATE_RESPONSE"




