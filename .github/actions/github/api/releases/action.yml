name: "Create GitHub Release"
description: "Create a GitHub release with signed tag via GitHub API"

inputs:
  version:
    description: "Version number for the release"
    required: true
  package-name:
    description: "Name of the package being released"
    required: true
  release-notes:
    description: "Release notes content in markdown"
    required: true
  is-prerelease:
    description: "Whether this is a prerelease"
    required: false
    default: "false"
  github-token:
    description: "GitHub token for API access"
    required: true

outputs:
  release-id:
    description: "ID of the created GitHub release"
    value: ${{ steps.create-release.outputs.release-id }}
  tag-sha:
    description: "SHA of the created tag"
    value: ${{ steps.create-release.outputs.tag-sha }}

runs:
  using: "composite"
  steps:
    - name: Create signed tag and GitHub Release via API
      id: create-release
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      run: |
        VERSION="${{ inputs.version }}"
        TAG_NAME="v$VERSION"
        RELEASE_NAME="${{ inputs.package-name }} v$VERSION"

        # Get current commit SHA
        COMMIT_SHA=$(git rev-parse HEAD)
        echo "Creating signed tag for commit: $COMMIT_SHA"

        # Create signed annotated tag via GitHub API
        echo "üè∑Ô∏è Creating signed annotated tag via GitHub API..."
        TAG_RESPONSE=$(curl -s -X POST \
          -H "Authorization: token ${{ inputs.github-token }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/git/tags" \
          -d "{
            \"tag\": \"$TAG_NAME\",
            \"message\": \"Release $TAG_NAME\",
            \"object\": \"$COMMIT_SHA\",
            \"type\": \"commit\"
          }")

        TAG_SHA=$(echo "$TAG_RESPONSE" | jq -r '.sha')

        if [ "$TAG_SHA" = "null" ] || [ -z "$TAG_SHA" ]; then
          echo "‚ùå Failed to create tag via API"
          echo "Response: $TAG_RESPONSE"
          exit 1
        fi

        echo "‚úÖ Created signed tag: $TAG_SHA"

        # Create tag reference
        echo "üìå Creating tag reference..."
        REF_RESPONSE=$(curl -s -X POST \
          -H "Authorization: token ${{ inputs.github-token }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/git/refs" \
          -d "{
            \"ref\": \"refs/tags/$TAG_NAME\",
            \"sha\": \"$TAG_SHA\"
          }")

        echo "‚úÖ Created tag reference"

        # Create GitHub Release
        echo "üöÄ Creating GitHub Release..."
        RELEASE_BODY="${{ inputs.release-notes }}"
        RELEASE_RESPONSE=$(curl -s -X POST \
          -H "Authorization: token ${{ inputs.github-token }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/releases" \
          -d "{
            \"tag_name\": \"$TAG_NAME\",
            \"name\": \"$RELEASE_NAME\",
            \"body\": $(echo "$RELEASE_BODY" | jq -Rs .),
            \"draft\": false,
            \"prerelease\": ${{ inputs.is-prerelease }}
          }")

        RELEASE_ID=$(echo "$RELEASE_RESPONSE" | jq -r '.id')

        if [ "$RELEASE_ID" = "null" ] || [ -z "$RELEASE_ID" ]; then
          echo "‚ùå Failed to create release"
          echo "Response: $RELEASE_RESPONSE"
          exit 1
        fi

        echo "‚úÖ Created GitHub Release: $RELEASE_ID"
        echo "release-id=$RELEASE_ID" >> $GITHUB_OUTPUT
        echo "tag-sha=$TAG_SHA" >> $GITHUB_OUTPUT

        # Verify tag signature
        echo "üîê Verifying tag signature..."
        TAG_VERIFY_RESPONSE=$(curl -s -H "Authorization: token ${{ inputs.github-token }}" \
          "https://api.github.com/repos/${{ github.repository }}/git/tags/$TAG_SHA")

        VERIFIED=$(echo "$TAG_VERIFY_RESPONSE" | jq -r '.verification.verified // false')
        VERIFICATION_REASON=$(echo "$TAG_VERIFY_RESPONSE" | jq -r '.verification.reason // "unknown"')

        echo "üîê Tag verified: $VERIFIED (reason: $VERIFICATION_REASON)"




