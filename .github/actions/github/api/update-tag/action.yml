name: "🏷️ Update Tag(s) via GitHub API"
description: "Updates Git tag(s) to point to different commits using GitHub API (creates signed tags)"

inputs:
  tag_data:
    description: 'Either single tag ''tagname:sha'' or JSON array ''[{"tag":"v1","sha":"abc123"},{"tag":"v1.0","sha":"def456"}]'''
    required: true
  github_token:
    description: "GitHub token for API access"
    required: true

outputs:
  success:
    description: "Whether all tags were successfully updated"
    value: ${{ steps.update.outputs.success }}
  updated_count:
    description: "Number of tags that were updated"
    value: ${{ steps.update.outputs.updated_count }}
  message:
    description: "Status message about the updates"
    value: ${{ steps.update.outputs.message }}

runs:
  using: composite
  steps:
    - name: Update tag(s) via GitHub API (inline Node)
      id: update
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        TAG_DATA: ${{ inputs.tag_data }}
        REPO: ${{ github.repository }}
      shell: bash
      run: |
        node <<'EOF'
        const fs = require('fs');
        const { execSync } = require('child_process');
        const out = process.env.GITHUB_OUTPUT;
        let raw = process.env.TAG_DATA || '';

        let updated = 0;
        let success = true;
        let messages = [];

        try {
          // Parse the tag data
          let tags;
          if (raw.startsWith('[')) {
            tags = JSON.parse(raw);
          } else if (raw.includes(',')) {
            // comma-separated format: tag1:sha1,tag2:sha2
            tags = raw.split(',').map(pair => {
              const [tag, sha] = pair.split(':');
              return { tag, sha };
            });
          } else {
            // single tag format: tag:sha
            const [tag, sha] = raw.split(':');
            tags = [{ tag, sha }];
          }
          
          console.log(`🔄 Processing ${tags.length} tag(s)`);
          
          for (const { tag, sha } of tags) {
            console.log(`🏷️ Updating tag ${tag} to point to ${sha}`);
            
            try {
              // Check if tag exists locally
              let tagExists = false;
              try {
                execSync(`git tag -l ${tag}`, { stdio: 'pipe' });
                const output = execSync(`git tag -l ${tag}`, { encoding: 'utf8' }).trim();
                tagExists = output === tag;
              } catch {}

              if (tagExists) {
                console.log(`📝 Tag ${tag} exists, force updating...`);
                // Force update existing tag (same as working system)
                execSync(`git tag -f ${tag} ${sha}`, { stdio: 'inherit' });
                execSync(`git push origin ${tag} --force`, { stdio: 'inherit' });
              } else {
                console.log(`🆕 Tag ${tag} doesn't exist, creating signed tag...`);
                // Create new signed tag
                execSync(`git tag -s ${tag} ${sha} -m "Create ${tag} pointing to latest patch"`, { stdio: 'inherit' });
                execSync(`git push origin ${tag}`, { stdio: 'inherit' });
              }
              
              console.log(`✅ Successfully updated tag ${tag}`);
              updated++;
              messages.push(`Tag ${tag} updated successfully`);
              
            } catch (error) {
              console.log(`❌ Failed to update tag ${tag}: ${error.message}`);
              success = false;
              messages.push(`Failed to update tag ${tag}: ${error.message}`);
            }
          }
          
        } catch (error) {
          console.log(`💥 Error processing tags: ${error.message}`);
          success = false;
          messages.push(`Error processing tags: ${error.message}`);
        }

        // Write outputs
        fs.appendFileSync(out, `success=${success}\n`);
        fs.appendFileSync(out, `updated_count=${updated}\n`);
        fs.appendFileSync(out, `message=${messages.join('; ')}\n`);

        if (success) {
          console.log(`🎉 Successfully updated ${updated} tag(s)`);
        } else {
          console.log('💥 Some tag updates failed');
          process.exit(1);
        }
        EOF
