name: "üè∑Ô∏è Update Tag(s) via GitHub API"
description: "Updates Git tag(s) to point to different commits using GitHub API (creates signed tags)"

inputs:
  tag_data:
    description: 'Either single tag ''tagname:sha'' or JSON array ''[{"tag":"v1","sha":"abc123"},{"tag":"v1.0","sha":"def456"}]'''
    required: true
  github_token:
    description: "GitHub token for API access"
    required: true

outputs:
  success:
    description: "Whether all tags were successfully updated"
    value: ${{ steps.update.outputs.success }}
  updated_count:
    description: "Number of tags that were updated"
    value: ${{ steps.update.outputs.updated_count }}
  message:
    description: "Status message about the updates"
    value: ${{ steps.update.outputs.message }}

runs:
  using: composite
  steps:
    - name: Update tag(s) via GitHub API (inline Node)
      id: update
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        TAG_DATA: ${{ inputs.tag_data }}
        REPO: ${{ github.repository }}
      shell: bash
      run: |
        node <<'EOF'
        const fs = require('fs');
        const out = process.env.GITHUB_OUTPUT;
        const repo = process.env.REPO;
        const token = process.env.GITHUB_TOKEN;
        let raw = process.env.TAG_DATA || '';

        const headers = {
          'Authorization': `Bearer ${token}`,
          'Accept': 'application/vnd.github+json',
          'X-GitHub-Api-Version': '2022-11-28'
        };
        const base = `https://api.github.com/repos/${repo}`;

        async function api(method, path, body) {
          const res = await fetch(base + path, {
            method,
            headers,
            body: body ? JSON.stringify(body) : undefined
          });
          if (res.ok) {
            if (res.status === 204) return null;
            return res.json();
          }
          const text = await res.text();
          throw new Error(`${method} ${path} -> ${res.status} ${text}`);
        }

        function parseTagData(raw) {
          raw = raw.trim();
          // base64 encoded JSON?
          if (/^[A-Za-z0-9+/]+=*$/.test(raw) && raw.length > 20 && !raw.startsWith('[')) {
            console.log('üîì Decoding base64 JSON data');
            const buf = Buffer.from(raw, 'base64');
            raw = buf.toString('utf8');
            console.log('üìÑ Decoded JSON:', raw);
          }

          if (raw.startsWith('[')) {
            console.log('üîÑ Processing multiple tags from JSON array');
            return JSON.parse(raw).map(o => `${o.tag}:${o.sha}`);
          } else if (raw.includes(',')) {
            console.log('üîÑ Processing multiple tags from comma-separated format');
            return raw.split(',').map(x => x.trim()).filter(Boolean);
          } else {
            console.log('üîÑ Processing single tag');
            return [raw];
          }
        }

        async function updateTag(tag, sha) {
          const refPath = `/git/refs/tags/${encodeURIComponent(tag)}`;
          try {
            await api('PATCH', refPath, { sha, force: true });
            console.log(`‚úÖ Successfully updated tag ${tag}`);
            return true;
          } catch (err) {
            console.log(`‚ùå Failed to PATCH tag ${tag}: ${err.message}`);
            console.log('‚Üª Trying delete and recreate approach...');
            try {
              await api('DELETE', refPath);
            } catch {}
            try {
              await api('POST', `/git/refs`, { ref: `refs/tags/${tag}`, sha });
              console.log(`‚úÖ Successfully recreated tag ${tag}`);
              return true;
            } catch (err2) {
              console.log(`‚ùå Failed to recreate tag ${tag}: ${err2.message}`);
              return false;
            }
          }
        }

        (async () => {
          let success = true;
          let updatedCount = 0;
          let messages = [];

          const pairs = parseTagData(raw);
          for (const pair of pairs) {
            const [tag, sha] = pair.split(':');
            console.log(`üè∑Ô∏è Updating tag ${tag} to point to ${sha}`);
            const ok = await updateTag(tag, sha);
            if (ok) {
              updatedCount++;
              messages.push(`Tag ${tag} updated`);
            } else {
              success = false;
              messages.push(`Tag ${tag} failed`);
            }
          }

          fs.appendFileSync(out, `success=${success}\n`);
          fs.appendFileSync(out, `updated_count=${updatedCount}\n`);
          fs.appendFileSync(out, `message=${messages.join('; ')}\n`);

          if (success) {
            console.log(`üéâ Successfully updated ${updatedCount} tag(s)`);
          } else {
            console.log('üí• Some tag updates failed');
            process.exit(1);
          }
        })().catch(err => {
          console.error('::error::' + err.message);
          process.exit(1);
        });
        EOF
