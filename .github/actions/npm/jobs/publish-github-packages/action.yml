name: "Publish to GitHub Packages"
description: "Composite action for publishing to GitHub Packages registry"

inputs:
  package-name:
    description: "Name of the package to publish"
    required: true
  version:
    description: "Version to publish"
    required: true
  node-version:
    description: "Node.js version to use"
    required: false
    default: "lts/*"
  package-manager:
    description: "Package manager (npm or yarn)"
    required: false
    default: "npm"
  publish-command:
    description: "Command to publish the package"
    required: true
  dry-run:
    description: "Dry run mode - validate everything but don't publish"
    required: false
    default: "false"
  github-token:
    description: "GitHub token for authentication"
    required: true
  artifact-name:
    description: "Name of the build artifact to download"
    required: false
    default: "build-artifacts"

outputs:
  published:
    description: "Whether the package was successfully published"
    value: ${{ steps.publish-package.outputs.published }}

runs:
  using: composite
  steps:
    - name: Update Summary - GitHub Packages Start
      shell: bash
      run: |
        echo "## 📦 GitHub Packages Publishing Progress" >> $GITHUB_STEP_SUMMARY
        echo "- 🔄 Starting GitHub Packages publication for ${{ inputs.package-name }}@${{ inputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

    - name: Generate publish command
      id: generate-command
      shell: bash
      run: |
        # Generate appropriate publish command for GitHub Packages
        PACKAGE_NAME="${{ inputs.package-name }}"
        CUSTOM_CMD="${{ inputs.publish-command }}"

        if [ -n "$CUSTOM_CMD" ]; then
          echo "🔧 Using custom publish command"
          FINAL_CMD="$CUSTOM_CMD"
        else
          echo "🔧 Generating GitHub Packages publish command"
          
          # For GitHub Packages, we typically want to match repository visibility
          REPO_VISIBILITY="${{ github.event.repository.private == false && 'public' || 'private' }}"
          echo "📊 Repository visibility: $REPO_VISIBILITY"
          
          # GitHub Packages access level should match repo visibility by default
          if [ "$REPO_VISIBILITY" = "public" ]; then
            ACCESS_LEVEL="public"
          else
            ACCESS_LEVEL="restricted"
          fi
          
          echo "🔒 Package access level: $ACCESS_LEVEL"
          
          # Generate command
          if [ "${{ inputs.package-manager }}" = "yarn" ]; then
            if [ "$ACCESS_LEVEL" = "public" ]; then
              FINAL_CMD="yarn publish --access public"
            else
              FINAL_CMD="yarn publish --access restricted"
            fi
          else
            if [ "$ACCESS_LEVEL" = "public" ]; then
              FINAL_CMD="npm publish --access public"
            else
              FINAL_CMD="npm publish --access restricted"
            fi
          fi
        fi

        echo "📝 Final publish command: $FINAL_CMD"
        echo "command=$FINAL_CMD" >> $GITHUB_OUTPUT

    - name: Publish package to GitHub Packages
      id: publish-package
      uses: CLDMV/.github/.github/actions/npm/steps/publish-package@v1
      with:
        registry-name: "GitHub Packages"
        registry-url: "https://npm.pkg.github.com"
        package-name: ${{ inputs.package-name }}
        version: ${{ inputs.version }}
        node-version: ${{ inputs.node-version }}
        package-manager: ${{ inputs.package-manager }}
        publish-command: ${{ steps.generate-command.outputs.command }}
        dry-run: ${{ inputs.dry-run }}
        auth-token: ${{ inputs.github-token }}
        artifact-name: ${{ inputs.artifact-name }}

    - name: Update Summary - GitHub Packages Success
      if: steps.publish-package.outputs.published == 'true' && inputs.dry-run != 'true'
      shell: bash
      run: |
        # Extract org and package name for GitHub Packages URL
        ORG_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f1)
        PACKAGE_NAME=$(echo "${{ inputs.package-name }}" | sed 's|^@[^/]*/||')

        # Format version - ensure no double "v" prefix
        VERSION="${{ inputs.version }}"
        if [[ "$VERSION" =~ ^v ]]; then
          DISPLAY_VERSION="$VERSION"
        else
          DISPLAY_VERSION="v$VERSION"
        fi

        echo "- ✅ GitHub Packages: Published [${{ inputs.package-name }} $DISPLAY_VERSION](https://github.com/orgs/$ORG_NAME/packages/npm/$PACKAGE_NAME)" >> $GITHUB_STEP_SUMMARY

    - name: Update Summary - GitHub Packages Dry Run Success
      if: steps.publish-package.outputs.published == 'true' && inputs.dry-run == 'true'
      shell: bash
      run: |
        echo "- 🧪 **DRY RUN**: GitHub Packages validation successful" >> $GITHUB_STEP_SUMMARY
        echo "  - ✅ Package name and version are valid" >> $GITHUB_STEP_SUMMARY
        echo "  - ✅ GitHub token has proper permissions" >> $GITHUB_STEP_SUMMARY
        echo "  - ✅ Publish command generated successfully" >> $GITHUB_STEP_SUMMARY
        echo "  - ✅ All prerequisites met for GitHub Packages publication" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "💡 **Would publish**: \`${{ steps.generate-command.outputs.command }}\` to registry \`https://npm.pkg.github.com\`" >> $GITHUB_STEP_SUMMARY

    - name: Update Summary - GitHub Packages Failure
      if: steps.publish-package.outputs.published != 'true' && inputs.dry-run != 'true'
      shell: bash
      run: |
        echo "- ❌ GitHub Packages: Publication failed for ${{ inputs.package-name }}@${{ inputs.version }}" >> $GITHUB_STEP_SUMMARY
