# CLDMV/.github/.github/actions/npm/steps/publish-package/action.yml
name: "Publish Package"
description: "Publishes an NPM package to a specified registry with fallback logic"

inputs:
  registry-name:
    description: 'Registry display name (e.g., "NPM", "GitHub Packages")'
    required: true
  registry-url:
    description: "Registry URL to publish to"
    required: true
  package-name:
    description: "Package name"
    required: true
  version:
    description: "Package version"
    required: true
  node-version:
    description: "Node.js version to use"
    required: true
  package-manager:
    description: "Package manager (npm or yarn)"
    required: true
    default: "npm"
  publish-command:
    description: "Primary publish command to execute"
    required: true
  auth-token:
    description: "Authentication token for the registry"
    required: true
  artifact-name:
    description: "Name of the build artifact to download"
    required: false
    default: "build-artifacts"

outputs:
  published:
    description: "Whether the package was successfully published"
    value: ${{ steps.publish.outputs.published }}

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.artifact-name }}

    - name: Verify package contents
      shell: bash
      run: |
        echo "📦 Verifying package contents from artifacts..."

        if [ -d "package-contents" ]; then
          echo "✅ Package contents directory found in artifacts"
          echo "📋 Files in package-contents:"
          ls -la package-contents/
          
          if [ ! -f "package-contents/package.json" ]; then
            echo "❌ No package.json found in package-contents"
            exit 1
          fi
        else
          echo "❌ Package contents directory not found in artifacts"
          echo "Available files:"
          ls -la
          exit 1
        fi

    - name: Setup Node.js for ${{ inputs.registry-name }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        registry-url: ${{ inputs.registry-url }}

    - name: Publish to ${{ inputs.registry-name }}
      id: publish
      shell: bash
      working-directory: package-contents
      env:
        NODE_AUTH_TOKEN: ${{ inputs.auth-token }}
      run: |
        echo "🚀 Publishing ${{ inputs.package-name }}@${{ inputs.version }} to ${{ inputs.registry-name }}"
        echo "📂 Publishing from package-contents directory"

        # Show what files are available for publishing
        echo "📋 Files in package:"
        ls -la

        # Verify package.json exists
        if [ ! -f "package.json" ]; then
          echo "❌ No package.json found in package-contents"
          exit 1
        fi

        # Set the publish command
        PUBLISH_CMD="${{ inputs.publish-command }}"

        if [ -z "$PUBLISH_CMD" ]; then
          echo "❌ No publish command provided"
          echo "published=false" >> $GITHUB_OUTPUT
          exit 1
        fi

        # Execute the provided command
        echo "🔧 Running command: $PUBLISH_CMD"
        if eval "$PUBLISH_CMD"; then
          echo "✅ Successfully published using primary command"
          echo "published=true" >> $GITHUB_OUTPUT
        else
          echo "⚠️ ${{ inputs.registry-name }} publish failed, trying with public access as fallback..."
          
          # Fallback to public access
          if [ "${{ inputs.package-manager }}" = "yarn" ]; then
            if yarn publish --access public; then
              echo "✅ Successfully published using yarn fallback command"
              echo "published=true" >> $GITHUB_OUTPUT
            else
              echo "❌ Failed to publish with yarn fallback"
              echo "published=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          else
            if npm publish --access public; then
              echo "✅ Successfully published using npm fallback command"
              echo "published=true" >> $GITHUB_OUTPUT
            else
              echo "❌ Failed to publish with npm fallback"
              echo "published=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi
        fi

        echo "✅ Successfully published to ${{ inputs.registry-name }}"
