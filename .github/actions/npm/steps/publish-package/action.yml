# CLDMV/.github/.github/actions/npm/steps/publish-package/action.yml
name: "Publish Package"
description: "Publishes an NPM package to a specified registry with fallback logic"

inputs:
  registry-name:
    description: 'Registry display name (e.g., "NPM", "GitHub Packages")'
    required: true
  registry-url:
    description: "Registry URL to publish to"
    required: true
  package-name:
    description: "Package name"
    required: true
  version:
    description: "Package version"
    required: true
  node-version:
    description: "Node.js version to use"
    required: true
  package-manager:
    description: "Package manager (npm or yarn)"
    required: true
    default: "npm"
  publish-command:
    description: "Primary publish command to execute"
    required: true
  dry-run:
    description: "Dry run mode - validate everything but don't publish"
    required: false
    default: "false"
  auth-token:
    description: "Authentication token for the registry"
    required: true
  artifact-name:
    description: "Name of the build artifact to download"
    required: false
    default: "build-artifacts"

outputs:
  published:
    description: "Whether the package was successfully published"
    value: ${{ steps.publish.outputs.published }}
  error-type:
    description: "Type of error if publish failed (version-conflict, auth-error, network-error, unknown)"
    value: ${{ steps.publish.outputs.error-type }}
  error-message:
    description: "Detailed error message"
    value: ${{ steps.publish.outputs.error-message }}
  suggested-fix:
    description: "Suggested action to fix the error"
    value: ${{ steps.publish.outputs.suggested-fix }}
  is-registry-available:
    description: "Whether the version is available in the registry"
    value: ${{ steps.publish.outputs.is-registry-available }}

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.artifact-name }}

    - name: Verify package contents
      shell: bash
      run: |
        echo "📦 Verifying package contents from artifacts..."

        if [ -d "package-contents" ]; then
          echo "✅ Package contents directory found in artifacts"
          echo "📋 Files in package-contents:"
          ls -la package-contents/
          
          if [ ! -f "package-contents/package.json" ]; then
            echo "❌ No package.json found in package-contents"
            exit 1
          fi
        else
          echo "❌ Package contents directory not found in artifacts"
          echo "Available files:"
          ls -la
          exit 1
        fi

    - name: Setup Node.js for ${{ inputs.registry-name }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        registry-url: ${{ inputs.registry-url }}

    - name: Publish to ${{ inputs.registry-name }}
      id: publish
      shell: bash
      working-directory: package-contents
      env:
        NODE_AUTH_TOKEN: ${{ inputs.auth-token }}
      run: |
        echo "🚀 Publishing ${{ inputs.package-name }}@${{ inputs.version }} to ${{ inputs.registry-name }}"
        echo "📂 Publishing from package-contents directory"

        # Show what files are available for publishing
        echo "📋 Files in package:"
        ls -la

        # Verify package.json exists
        if [ ! -f "package.json" ]; then
          echo "❌ No package.json found in package-contents"
          echo "published=false" >> $GITHUB_OUTPUT
          echo "error-type=missing-package-json" >> $GITHUB_OUTPUT
          echo "error-message=package.json not found in package-contents directory" >> $GITHUB_OUTPUT
          echo "suggested-fix=Ensure build step creates package-contents with package.json" >> $GITHUB_OUTPUT
          exit 1
        fi

        # Set the publish command
        PUBLISH_CMD="${{ inputs.publish-command }}"

        if [ -z "$PUBLISH_CMD" ]; then
          echo "❌ No publish command provided"
          echo "published=false" >> $GITHUB_OUTPUT
          echo "error-type=missing-command" >> $GITHUB_OUTPUT
          echo "error-message=No publish command was provided" >> $GITHUB_OUTPUT
          echo "suggested-fix=Provide a valid publish command in workflow inputs" >> $GITHUB_OUTPUT
          exit 1
        fi

        # Check if this is a dry run
        if [ "${{ inputs.dry-run }}" = "true" ]; then
          echo "🧪 DRY RUN MODE: Validating publish setup without executing"
          echo "📝 Would execute command: $PUBLISH_CMD"
          echo ""
          echo "✅ Validation completed successfully:"
          echo "  - Package directory structure is valid"
          echo "  - package.json exists and is accessible"
          echo "  - Node.js and registry configuration is correct"
          echo "  - Publish command is properly formatted"
          echo "  - Authentication token is available"
          echo ""
          echo "💡 In real run, would execute: $PUBLISH_CMD"
          echo "published=true" >> $GITHUB_OUTPUT
          echo "error-type=" >> $GITHUB_OUTPUT
          echo "error-message=" >> $GITHUB_OUTPUT
          echo "suggested-fix=" >> $GITHUB_OUTPUT
          echo "is-registry-available=true" >> $GITHUB_OUTPUT
        else
          # Execute the provided command and capture output
          echo "🔧 Running command: $PUBLISH_CMD"

          if OUTPUT=$(eval "$PUBLISH_CMD" 2>&1); then
          echo "✅ Successfully published to ${{ inputs.registry-name }}"
          echo "$OUTPUT"
          echo "published=true" >> $GITHUB_OUTPUT
          echo "error-type=" >> $GITHUB_OUTPUT
          echo "error-message=" >> $GITHUB_OUTPUT
          echo "suggested-fix=" >> $GITHUB_OUTPUT
          echo "is-registry-available=true" >> $GITHUB_OUTPUT
        else
          EXIT_CODE=$?
          echo "❌ Publish failed with exit code: $EXIT_CODE"
          echo "Error output: $OUTPUT"
          
          # Analyze the error and provide specific guidance
          if echo "$OUTPUT" | grep -q "Cannot publish over previously published version"; then
            # This is the key case - version was previously published but may not be visible
            echo ""
            echo "📊 Version conflict detected: ${{ inputs.version }} was previously published"
            
            # Check if version is currently available in registry
            if npm view "${{ inputs.package-name }}@${{ inputs.version }}" version 2>/dev/null; then
              echo "✅ Version ${{ inputs.version }} is available in registry"
              echo "ℹ️ This is a pseudo-success - version exists and is accessible"
              echo "published=true" >> $GITHUB_OUTPUT
              echo "error-type=version-already-published" >> $GITHUB_OUTPUT
              echo "error-message=Version ${{ inputs.version }} already exists in registry" >> $GITHUB_OUTPUT
              echo "suggested-fix=This is normal - the version is already published and available" >> $GITHUB_OUTPUT
              echo "is-registry-available=true" >> $GITHUB_OUTPUT
            else
              echo "❌ Version ${{ inputs.version }} is NOT available in registry"
              echo "⚠️ This version was previously published but is now reserved/hidden"
              echo "published=false" >> $GITHUB_OUTPUT
              echo "error-type=version-conflict" >> $GITHUB_OUTPUT
              echo "error-message=Version ${{ inputs.version }} is reserved by NPM (previously published then unpublished)" >> $GITHUB_OUTPUT
              echo "suggested-fix=Update package.json version, git tags, and GitHub releases to a new version number" >> $GITHUB_OUTPUT
              echo "is-registry-available=false" >> $GITHUB_OUTPUT
              exit 1
            fi
            
          elif echo "$OUTPUT" | grep -q "403\|401\|authentication\|Unauthorized\|Forbidden"; then
            echo "❌ Authentication/authorization error"
            echo "published=false" >> $GITHUB_OUTPUT
            echo "error-type=auth-error" >> $GITHUB_OUTPUT
            echo "error-message=Authentication failed - check token permissions" >> $GITHUB_OUTPUT
            echo "suggested-fix=Verify NPM_TOKEN or GITHUB_TOKEN has publish permissions" >> $GITHUB_OUTPUT
            echo "is-registry-available=unknown" >> $GITHUB_OUTPUT
            exit 1
            
          elif echo "$OUTPUT" | grep -q "network\|timeout\|ENOTFOUND\|ETIMEDOUT"; then
            echo "❌ Network error"
            echo "published=false" >> $GITHUB_OUTPUT
            echo "error-type=network-error" >> $GITHUB_OUTPUT
            echo "error-message=Network connectivity issue" >> $GITHUB_OUTPUT
            echo "suggested-fix=Retry the workflow - this may be a temporary network issue" >> $GITHUB_OUTPUT
            echo "is-registry-available=unknown" >> $GITHUB_OUTPUT
            exit 1
            
          else
            echo "❌ Unknown publish error"
            echo "published=false" >> $GITHUB_OUTPUT
            echo "error-type=unknown" >> $GITHUB_OUTPUT
            echo "error-message=$OUTPUT" >> $GITHUB_OUTPUT
            echo "suggested-fix=Check the error message above and resolve the specific issue" >> $GITHUB_OUTPUT
            echo "is-registry-available=unknown" >> $GITHUB_OUTPUT
            exit 1
          fi
        fi  # End of real publish execution
        fi  # End of dry run conditional
