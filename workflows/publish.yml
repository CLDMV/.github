# CLDMV/.github/.github/workflows/publish-modular.yml
name: Publish Workflow (Modular)

on:
  workflow_call:
    inputs:
      package_name:
        required: true
        type: string
        description: "NPM package name (e.g., @cldmv/slothlet)"
      node_version:
        required: false
        type: string
        default: "lts/*"
        description: "Node.js version to use"
      test_command:
        required: false
        type: string
        default: "npm test"
        description: "Command to run pre-build tests"
      build_command:
        required: false
        type: string
        default: "npm run build:ci"
        description: "Command to build package (should include post-build tests)"
      publish_command:
        required: false
        type: string
        default: ""
        description: "Command to publish package to NPM (auto-detects access level if empty)"
      github_packages_publish_command:
        required: false
        type: string
        default: ""
        description: "Command to publish package to GitHub Packages (auto-detects access level if empty)"
      publish_to_npm:
        required: false
        type: boolean
        default: true
        description: "Publish to NPM registry"
      skip_publish:
        required: false
        type: boolean
        default: false
        description: "Skip ALL publishing (for testing)"
      publish_to_github_packages:
        required: false
        type: boolean
        default: true
        description: "Publish to GitHub Packages registry"
      package_manager:
        required: false
        type: string
        default: "npm"
        description: "Package manager (npm or yarn)"
    secrets:
      NPM_TOKEN:
        required: true
    outputs:
      published:
        description: "Whether the package was successfully published"
        value: ${{ jobs.detect-release.outputs.should-release }}
      npm-published:
        description: "Whether the package was published to NPM"
        value: ${{ jobs.publish-to-npm.outputs.published || 'false' }}
      github-packages-published:
        description: "Whether the package was published to GitHub Packages"
        value: ${{ jobs.publish-to-github-packages.outputs.published || 'false' }}
      version:
        description: "Version of the package that was published"
        value: ${{ jobs.detect-release.outputs.version }}
      release-id:
        description: "GitHub release ID"
        value: ${{ jobs.create-github-release.outputs.release-id }}
      repo-is-private:
        description: "Whether repository is private"
        value: ${{ jobs.detect-repo-config.outputs.repo-is-private }}
      npm-command:
        description: "Auto-detected NPM publish command"
        value: ${{ jobs.detect-repo-config.outputs.npm-command }}
      github-packages-command:
        description: "Auto-detected GitHub Packages publish command"
        value: ${{ jobs.detect-repo-config.outputs.github-packages-command }}

jobs:
  # Git-based release detection
  detect-release:
    uses: CLDMV/.github/workflow-packages/git/jobs/detect-release.yml

  # NPM-specific build and test
  build-and-test:
    needs: detect-release
    if: needs.detect-release.outputs.should-release == 'true'
    uses: CLDMV/.github/workflow-packages/npm/jobs/build-and-test.yml
    with:
      node-version: ${{ inputs.node_version }}
      package-manager: ${{ inputs.package_manager }}
      test-command: ${{ inputs.test_command }}
      build-command: ${{ inputs.build_command }}

  # GitHub API-based release creation
  create-github-release:
    needs: [detect-release, build-and-test]
    uses: CLDMV/.github/workflow-packages/github/jobs/create-release.yml
    with:
      version: ${{ needs.detect-release.outputs.version }}
      package-name: ${{ inputs.package_name }}
      is-prerelease: ${{ needs.detect-release.outputs.is-prerelease == 'true' }}
      package-manager: ${{ inputs.package_manager }}
    secrets:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # GitHub utility for repository configuration detection
  detect-repo-config:
    needs: [detect-release, build-and-test, create-github-release]
    if: |
      inputs.skip_publish != true && 
      (inputs.publish_to_npm == true || inputs.publish_to_github_packages == true)
    uses: CLDMV/.github/workflow-packages/github/jobs/detect-repo-config.yml
    with:
      package-manager: ${{ inputs.package_manager }}
      custom-npm-command: ${{ inputs.publish_command }}
      custom-github-packages-command: ${{ inputs.github_packages_publish_command }}
    secrets:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # NPM publishing
  publish-to-npm:
    needs: [detect-release, detect-repo-config]
    if: inputs.skip_publish != true && inputs.publish_to_npm == true
    uses: CLDMV/.github/workflow-packages/npm/jobs/publish-npm.yml
    with:
      package-name: ${{ inputs.package_name }}
      version: ${{ needs.detect-release.outputs.version }}
      node-version: ${{ inputs.node_version }}
      package-manager: ${{ inputs.package_manager }}
      publish-command: ${{ needs.detect-repo-config.outputs.npm-command }}
    secrets:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  # GitHub Packages publishing
  publish-to-github-packages:
    needs: [detect-release, detect-repo-config]
    if: inputs.skip_publish != true && inputs.publish_to_github_packages == true
    uses: CLDMV/.github/workflow-packages/npm/jobs/publish-github-packages.yml
    with:
      package-name: ${{ inputs.package_name }}
      version: ${{ needs.detect-release.outputs.version }}
      node-version: ${{ inputs.node_version }}
      package-manager: ${{ inputs.package_manager }}
      publish-command: ${{ needs.detect-repo-config.outputs.github-packages-command }}
    secrets:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # GitHub success notification
  add-success-comment:
    name: "üí¨ Add Success Comment"
    needs: [detect-release, publish-to-npm, publish-to-github-packages]
    if: |
      always() && 
      inputs.skip_publish != true && 
      (needs.publish-to-npm.result == 'success' || needs.publish-to-github-packages.result == 'success') &&
      (inputs.publish_to_npm == true || inputs.publish_to_github_packages == true)
    runs-on: ubuntu-latest
    steps:
      - name: Add success comment
        uses: CLDMV/.github/workflow-packages/github/steps/add-success-comment.yml
        with:
          version: ${{ needs.detect-release.outputs.version }}
          package-name: ${{ inputs.package_name }}
          npm-published: ${{ needs.publish-to-npm.result == 'success' }}
          github-packages-published: ${{ needs.publish-to-github-packages.result == 'success' }}
          publish-to-npm: ${{ inputs.publish_to_npm }}
          publish-to-github-packages: ${{ inputs.publish_to_github_packages }}

  # Summary notification
  notify-completion:
    name: "‚úÖ Release Summary"
    needs: [detect-release, create-github-release, publish-to-npm, publish-to-github-packages]
    if: always() && needs.detect-release.outputs.should-release == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Release completion summary
        shell: bash
        run: |
          VERSION="${{ needs.detect-release.outputs.version }}"
          PACKAGE="${{ inputs.package_name }}"

          echo "üéä Release $PACKAGE v$VERSION completed!"
          echo "‚úÖ GitHub Release: Created"

          # Check NPM publish status
          if [[ "${{ inputs.publish_to_npm }}" == "true" ]]; then
            if [[ "${{ needs.publish-to-npm.result }}" == "success" ]]; then
              echo "‚úÖ NPM Publish: Success"
            else
              echo "‚ùå NPM Publish: Failed"
            fi
          else
            echo "‚è≠Ô∏è NPM Publish: Disabled"
          fi

          # Check GitHub Packages publish status
          if [[ "${{ inputs.publish_to_github_packages }}" == "true" ]]; then
            if [[ "${{ needs.publish-to-github-packages.result }}" == "success" ]]; then
              echo "‚úÖ GitHub Packages Publish: Success"
            else
              echo "‚ùå GitHub Packages Publish: Failed"
            fi
          else
            echo "‚è≠Ô∏è GitHub Packages Publish: Disabled"
          fi

          if [[ "${{ inputs.skip_publish }}" == "true" ]]; then
            echo "‚è≠Ô∏è All Publishing: Skipped (configured)"
          fi

          echo ""
          echo "üîó Release URL: https://github.com/${{ github.repository }}/releases/tag/v$VERSION"

          if [[ "${{ inputs.publish_to_npm }}" == "true" && "${{ needs.publish-to-npm.result }}" == "success" ]]; then
            echo "üì¶ NPM URL: https://www.npmjs.com/package/$PACKAGE/v/$VERSION"
          fi
